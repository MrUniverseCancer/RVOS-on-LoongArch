
out/os.elf:     file format elf32-loongarch


Disassembly of section .text:

00000000 <_start>:
	.global	_start

	.text
_start:

	la.local $t0, stacks
       0:	1c00000c 	pcaddu12i	$r12,0
       4:	0280718c 	addi.w	$r12,$r12,28(0x1c)
	la.local $t1, STACK_SIZE
       8:	1c00004d 	pcaddu12i	$r13,2(0x2)
       c:	02bfe1ad 	addi.w	$r13,$r13,-8(0xff8)
	ld.w     $t1, $t1, 0
      10:	288001ad 	ld.w	$r13,$r13,0
	add.w   $sp, $t0, $t1
      14:	00103583 	add.w	$r3,$r12,$r13
					# set the initial stack pointer
					# to the end of the first stack space
	
	# la.local $t0, start_kernel
	# jr $t0
	b start_kernel
      18:	50051800 	b	1304(0x518) # 530 <start_kernel>

0000001c <stacks>:
	...
     41c:	03400000 	andi	$r0,$r0,0x0

00000420 <switch_to>:
.globl switch_to
.balign 4
# SAVE0 = 0x30
switch_to:

	csrwr	$a7, 0x30	# swap $a7 and mscratch
     420:	0400c02b 	csrwr	$r11,0x30
	beq 	$a7, $r0, next		# handle special
     424:	58008560 	beq	$r11,$r0,132(0x84) # 4a8 <next>
    reg_save $a7
     428:	29800161 	st.w	$r1,$r11,0
     42c:	29801162 	st.w	$r2,$r11,4(0x4)
     430:	29804164 	st.w	$r4,$r11,16(0x10)
     434:	29805165 	st.w	$r5,$r11,20(0x14)
     438:	29806166 	st.w	$r6,$r11,24(0x18)
     43c:	29807167 	st.w	$r7,$r11,28(0x1c)
     440:	29808168 	st.w	$r8,$r11,32(0x20)
     444:	29809169 	st.w	$r9,$r11,36(0x24)
     448:	2980a16a 	st.w	$r10,$r11,40(0x28)
     44c:	2980b16b 	st.w	$r11,$r11,44(0x2c)
     450:	2980c16c 	st.w	$r12,$r11,48(0x30)
     454:	2980d16d 	st.w	$r13,$r11,52(0x34)
     458:	2980e16e 	st.w	$r14,$r11,56(0x38)
     45c:	2980f16f 	st.w	$r15,$r11,60(0x3c)
     460:	29810170 	st.w	$r16,$r11,64(0x40)
     464:	29811171 	st.w	$r17,$r11,68(0x44)
     468:	29812172 	st.w	$r18,$r11,72(0x48)
     46c:	29813173 	st.w	$r19,$r11,76(0x4c)
     470:	29814174 	st.w	$r20,$r11,80(0x50)
     474:	29815175 	st.w	$r21,$r11,84(0x54)
     478:	29816177 	st.w	$r23,$r11,88(0x58)
     47c:	29817178 	st.w	$r24,$r11,92(0x5c)
     480:	29818179 	st.w	$r25,$r11,96(0x60)
     484:	2981917a 	st.w	$r26,$r11,100(0x64)
     488:	2981a17b 	st.w	$r27,$r11,104(0x68)
     48c:	2981b17c 	st.w	$r28,$r11,108(0x6c)
     490:	2981c17d 	st.w	$r29,$r11,112(0x70)
     494:	2981d17e 	st.w	$r30,$r11,116(0x74)
     498:	2981e17f 	st.w	$r31,$r11,120(0x78)
    addi.w  $a6, $a7, 0   # mv $a7->a6
     49c:	0280016a 	addi.w	$r10,$r11,0
    csrwr	$a7, 0x30
     4a0:	0400c02b 	csrwr	$r11,0x30
    STORE   $a7, $a6, 30*SIZE_REG
     4a4:	2981e14b 	st.w	$r11,$r10,120(0x78)

000004a8 <next>:

next:
    csrwr  $t0, 0x30
     4a8:	0400c02c 	csrwr	$r12,0x30
    addi.w $a7, $t0, 0
     4ac:	0280018b 	addi.w	$r11,$r12,0
    reg_restore $a7
     4b0:	28800161 	ld.w	$r1,$r11,0
     4b4:	28801162 	ld.w	$r2,$r11,4(0x4)
     4b8:	28804164 	ld.w	$r4,$r11,16(0x10)
     4bc:	28805165 	ld.w	$r5,$r11,20(0x14)
     4c0:	28806166 	ld.w	$r6,$r11,24(0x18)
     4c4:	28807167 	ld.w	$r7,$r11,28(0x1c)
     4c8:	28808168 	ld.w	$r8,$r11,32(0x20)
     4cc:	28809169 	ld.w	$r9,$r11,36(0x24)
     4d0:	2880a16a 	ld.w	$r10,$r11,40(0x28)
     4d4:	2880b16b 	ld.w	$r11,$r11,44(0x2c)
     4d8:	2880c16c 	ld.w	$r12,$r11,48(0x30)
     4dc:	2880d16d 	ld.w	$r13,$r11,52(0x34)
     4e0:	2880e16e 	ld.w	$r14,$r11,56(0x38)
     4e4:	2880f16f 	ld.w	$r15,$r11,60(0x3c)
     4e8:	28810170 	ld.w	$r16,$r11,64(0x40)
     4ec:	28811171 	ld.w	$r17,$r11,68(0x44)
     4f0:	28812172 	ld.w	$r18,$r11,72(0x48)
     4f4:	28813173 	ld.w	$r19,$r11,76(0x4c)
     4f8:	28814174 	ld.w	$r20,$r11,80(0x50)
     4fc:	28815175 	ld.w	$r21,$r11,84(0x54)
     500:	28816177 	ld.w	$r23,$r11,88(0x58)
     504:	28817178 	ld.w	$r24,$r11,92(0x5c)
     508:	28818179 	ld.w	$r25,$r11,96(0x60)
     50c:	2881917a 	ld.w	$r26,$r11,100(0x64)
     510:	2881a17b 	ld.w	$r27,$r11,104(0x68)
     514:	2881b17c 	ld.w	$r28,$r11,108(0x6c)
     518:	2881c17d 	ld.w	$r29,$r11,112(0x70)
     51c:	2881d17e 	ld.w	$r30,$r11,116(0x74)
     520:	2881e17f 	ld.w	$r31,$r11,120(0x78)

    #ret
	jirl $r0, $r1, 0
     524:	4c000020 	jirl	$r0,$r1,0
	...

00000530 <start_kernel>:
#include "os.h"

int i = 0;
void start_kernel(void)
{	
     530:	02bfc063 	addi.w	$r3,$r3,-16(0xff0)
     534:	29803061 	st.w	$r1,$r3,12(0xc)
	uart_init();
     538:	54004800 	bl	72(0x48) # 580 <uart_init>
	printf("this is uart_test: %d + %s = %c\nDone!\n",1, "1", '2');
     53c:	0280c807 	addi.w	$r7,$r0,50(0x32)
     540:	1c000026 	pcaddu12i	$r6,1(0x1)
     544:	02bea0c6 	addi.w	$r6,$r6,-88(0xfa8)
     548:	02800405 	addi.w	$r5,$r0,1(0x1)
     54c:	1c000024 	pcaddu12i	$r4,1(0x1)
     550:	02be8084 	addi.w	$r4,$r4,-96(0xfa0)
     554:	5400cc00 	bl	204(0xcc) # 620 <printf>
	

	page_init();
     558:	5406f800 	bl	1784(0x6f8) # c50 <page_init>

	sched_init();
     55c:	540ee400 	bl	3812(0xee4) # 1440 <sched_init>

	schedule();
     560:	540f1000 	bl	3856(0xf10) # 1470 <schedule>
	
	printf("Would not go here\n");
     564:	1c000024 	pcaddu12i	$r4,1(0x1)
     568:	02bec084 	addi.w	$r4,$r4,-80(0xfb0)
     56c:	5400b400 	bl	180(0xb4) # 620 <printf>
	while (1) {
		// uart_puts("666");
	}; // stop here!
     570:	50000000 	b	0 # 570 <start_kernel+0x40>
     574:	03400000 	andi	$r0,$r0,0x0
     578:	03400000 	andi	$r0,$r0,0x0
     57c:	03400000 	andi	$r0,$r0,0x0

00000580 <uart_init>:
    return *(volatile char*)addr;
}

static void io_writeb(unsigned long addr, char c)
{
    *(char*)addr = c;
     580:	143fc00c 	lu12i.w	$r12,130560(0x1fe00)
    return *(volatile char*)addr;
     584:	03878d8d 	ori	$r13,$r12,0x1e3
    *(char*)addr = c;
     588:	0387858f 	ori	$r15,$r12,0x1e1
    return *(volatile char*)addr;
     58c:	2a0001b0 	ld.bu	$r16,$r13,0
    *(char*)addr = c;
     590:	02800c0e 	addi.w	$r14,$r0,3(0x3)
     594:	290001e0 	st.b	$r0,$r15,0
     598:	0387818c 	ori	$r12,$r12,0x1e0
     59c:	2900018e 	st.b	$r14,$r12,0
     5a0:	290001ae 	st.b	$r14,$r13,0
	 * - no break control
	 * - disabled baud latch
	 */
	lcr = 0;
	uart_write_reg(LCR, lcr | (3 << 0));
}
     5a4:	4c000020 	jirl	$r0,$r1,0
     5a8:	03400000 	andi	$r0,$r0,0x0
     5ac:	03400000 	andi	$r0,$r0,0x0

000005b0 <uart_putc>:
    return *(volatile char*)addr;
     5b0:	143fc00e 	lu12i.w	$r14,130560(0x1fe00)

int uart_putc(char ch)
{
     5b4:	0015008f 	move	$r15,$r4
    return *(volatile char*)addr;
     5b8:	038795cd 	ori	$r13,$r14,0x1e5
     5bc:	03400000 	andi	$r0,$r0,0x0
     5c0:	2a0001ac 	ld.bu	$r12,$r13,0
	while ((uart_read_reg(LSR) & LSR_TX_IDLE) == 0);
     5c4:	0340818c 	andi	$r12,$r12,0x20
     5c8:	43fff99f 	beqz	$r12,-8(0x7ffff8) # 5c0 <uart_putc+0x10>
    *(char*)addr = c;
     5cc:	038781ce 	ori	$r14,$r14,0x1e0
	uart_write_reg(THR, ch);

	return (int)ch;
}
     5d0:	001501e4 	move	$r4,$r15
    *(char*)addr = c;
     5d4:	290001cf 	st.b	$r15,$r14,0
}
     5d8:	4c000020 	jirl	$r0,$r1,0
     5dc:	03400000 	andi	$r0,$r0,0x0

000005e0 <uart_puts>:

void uart_puts(char *s)
{
	while (*s) {
     5e0:	2800008e 	ld.b	$r14,$r4,0
     5e4:	40002dc0 	beqz	$r14,44(0x2c) # 610 <uart_puts+0x30>
    return *(volatile char*)addr;
     5e8:	143fc00f 	lu12i.w	$r15,130560(0x1fe00)
     5ec:	038795ed 	ori	$r13,$r15,0x1e5
    *(char*)addr = c;
     5f0:	038781ef 	ori	$r15,$r15,0x1e0
		uart_putc(*s++);
     5f4:	02800484 	addi.w	$r4,$r4,1(0x1)
    return *(volatile char*)addr;
     5f8:	2a0001ac 	ld.bu	$r12,$r13,0
	while ((uart_read_reg(LSR) & LSR_TX_IDLE) == 0);
     5fc:	0340818c 	andi	$r12,$r12,0x20
     600:	43fff99f 	beqz	$r12,-8(0x7ffff8) # 5f8 <uart_puts+0x18>
    *(char*)addr = c;
     604:	290001ee 	st.b	$r14,$r15,0
	while (*s) {
     608:	2800008e 	ld.b	$r14,$r4,0
     60c:	47ffe9df 	bnez	$r14,-24(0x7fffe8) # 5f4 <uart_puts+0x14>
	}
}
     610:	4c000020 	jirl	$r0,$r1,0
     614:	03400000 	andi	$r0,$r0,0x0
     618:	03400000 	andi	$r0,$r0,0x0
     61c:	03400000 	andi	$r0,$r0,0x0

00000620 <printf>:
	uart_puts(out_buf);
	return res;
}

int printf(const char* s, ...)
{
     620:	02bec063 	addi.w	$r3,$r3,-80(0xfb0)
     624:	2980b061 	st.w	$r1,$r3,44(0x2c)
     628:	2980a077 	st.w	$r23,$r3,40(0x28)
     62c:	29809078 	st.w	$r24,$r3,36(0x24)
     630:	29808079 	st.w	$r25,$r3,32(0x20)
     634:	2980707a 	st.w	$r26,$r3,28(0x1c)
     638:	2980607b 	st.w	$r27,$r3,24(0x18)
     63c:	2980507c 	st.w	$r28,$r3,20(0x14)
     640:	2980d065 	st.w	$r5,$r3,52(0x34)
     644:	2980e066 	st.w	$r6,$r3,56(0x38)
	for (; *s; s++) {
     648:	2800008d 	ld.b	$r13,$r4,0
	int res = 0;
	va_list vl;
	va_start(vl, s);
     64c:	0280d071 	addi.w	$r17,$r3,52(0x34)
{
     650:	2980f067 	st.w	$r7,$r3,60(0x3c)
     654:	29810068 	st.w	$r8,$r3,64(0x40)
     658:	29811069 	st.w	$r9,$r3,68(0x44)
     65c:	2981206a 	st.w	$r10,$r3,72(0x48)
     660:	2981306b 	st.w	$r11,$r3,76(0x4c)
	va_start(vl, s);
     664:	29803071 	st.w	$r17,$r3,12(0xc)
	for (; *s; s++) {
     668:	400569a0 	beqz	$r13,1384(0x568) # bd0 <printf+0x5b0>
     66c:	00150230 	move	$r16,$r17
     670:	00150092 	move	$r18,$r4
     674:	001501ac 	move	$r12,$r13
	size_t pos = 0;
     678:	0015000e 	move	$r14,$r0
	int format = 0;
     67c:	0015000f 	move	$r15,$r0
		} else if (*s == '%') {
     680:	0280940a 	addi.w	$r10,$r0,37(0x25)
			if(tmp == 'l') {
     684:	0281b009 	addi.w	$r9,$r0,108(0x6c)
			else if(tmp == 'p' || tmp == 'x'){
     688:	0281c008 	addi.w	$r8,$r0,112(0x70)
     68c:	0281e007 	addi.w	$r7,$r0,120(0x78)
			else if(tmp == 'd' ){
     690:	02819006 	addi.w	$r6,$r0,100(0x64)
			else if(tmp == 's'){
     694:	0281cc05 	addi.w	$r5,$r0,115(0x73)
			else if(tmp == 'c'){
     698:	02818c14 	addi.w	$r20,$r0,99(0x63)
				for (long nn = num; nn /= 10; digits++);
     69c:	02802813 	addi.w	$r19,$r0,10(0xa)
		if (format) {
     6a0:	400051e0 	beqz	$r15,80(0x50) # 6f0 <printf+0xd0>
			if(tmp == 'l') {
     6a4:	58002189 	beq	$r12,$r9,32(0x20) # 6c4 <printf+0xa4>
			else if(tmp == 'p' || tmp == 'x'){
     6a8:	5801d188 	beq	$r12,$r8,464(0x1d0) # 878 <printf+0x258>
     6ac:	58007587 	beq	$r12,$r7,116(0x74) # 720 <printf+0x100>
			else if(tmp == 'd' ){
     6b0:	58017186 	beq	$r12,$r6,368(0x170) # 820 <printf+0x200>
			else if(tmp == 's'){
     6b4:	58038d85 	beq	$r12,$r5,908(0x38c) # a40 <printf+0x420>
			else if(tmp == 'c'){
     6b8:	5c000d94 	bne	$r12,$r20,12(0xc) # 6c4 <printf+0xa4>
				pos++;
     6bc:	028005ce 	addi.w	$r14,$r14,1(0x1)
				format = 0;
     6c0:	0015000f 	move	$r15,$r0
	for (; *s; s++) {
     6c4:	02800652 	addi.w	$r18,$r18,1(0x1)
     6c8:	2800024c 	ld.b	$r12,$r18,0
     6cc:	47ffd59f 	bnez	$r12,-44(0x7fffd4) # 6a0 <printf+0x80>
	if (res+1 >= sizeof(out_buf)) {
     6d0:	028005d0 	addi.w	$r16,$r14,1(0x1)
     6d4:	028f9c0c 	addi.w	$r12,$r0,999(0x3e7)
	return pos;
     6d8:	001501d7 	move	$r23,$r14
	if (res+1 >= sizeof(out_buf)) {
     6dc:	6c006590 	bgeu	$r12,$r16,100(0x64) # 740 <printf+0x120>
		uart_puts("error: output string size overflow\n");
     6e0:	1c000024 	pcaddu12i	$r4,1(0x1)
     6e4:	02b92084 	addi.w	$r4,$r4,-440(0xe48)
     6e8:	57fefbff 	bl	-264(0xffffef8) # 5e0 <uart_puts>
		while(1) {}
     6ec:	50000000 	b	0 # 6ec <printf+0xcc>
		} else if (*s == '%') {
     6f0:	5800198a 	beq	$r12,$r10,24(0x18) # 708 <printf+0xe8>
	for (; *s; s++) {
     6f4:	02800652 	addi.w	$r18,$r18,1(0x1)
     6f8:	2800024c 	ld.b	$r12,$r18,0
			pos++;
     6fc:	028005ce 	addi.w	$r14,$r14,1(0x1)
	for (; *s; s++) {
     700:	47ffa19f 	bnez	$r12,-96(0x7fffa0) # 6a0 <printf+0x80>
     704:	53ffcfff 	b	-52(0xfffffcc) # 6d0 <printf+0xb0>
     708:	02800652 	addi.w	$r18,$r18,1(0x1)
     70c:	2800024c 	ld.b	$r12,$r18,0
			format = 1;
     710:	0280040f 	addi.w	$r15,$r0,1(0x1)
	for (; *s; s++) {
     714:	47ff8d9f 	bnez	$r12,-116(0x7fff8c) # 6a0 <printf+0x80>
     718:	53ffbbff 	b	-72(0xfffffb8) # 6d0 <printf+0xb0>
     71c:	03400000 	andi	$r0,$r0,0x0
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
     720:	02801210 	addi.w	$r16,$r16,4(0x4)
					pos++;
     724:	028021ce 	addi.w	$r14,$r14,8(0x8)
				format = 0;
     728:	0015000f 	move	$r15,$r0
	for (; *s; s++) {
     72c:	02800652 	addi.w	$r18,$r18,1(0x1)
     730:	2800024c 	ld.b	$r12,$r18,0
     734:	47ff6d9f 	bnez	$r12,-148(0x7fff6c) # 6a0 <printf+0x80>
     738:	53ff9bff 	b	-104(0xfffff98) # 6d0 <printf+0xb0>
     73c:	03400000 	andi	$r0,$r0,0x0
	size_t pos = 0;
     740:	0015000c 	move	$r12,$r0
	int format = 0;
     744:	0015000f 	move	$r15,$r0
		} else if (*s == '%') {
     748:	02809408 	addi.w	$r8,$r0,37(0x25)
				out[pos] = *s;
     74c:	1c000052 	pcaddu12i	$r18,2(0x2)
     750:	02a3e252 	addi.w	$r18,$r18,-1800(0x8f8)
			if(tmp == 'l') {
     754:	0281b007 	addi.w	$r7,$r0,108(0x6c)
			else if(tmp == 'p' || tmp == 'x'){
     758:	0281c006 	addi.w	$r6,$r0,112(0x70)
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
     75c:	02802414 	addi.w	$r20,$r0,9(0x9)
						out[pos] = 'x';
     760:	0281e018 	addi.w	$r24,$r0,120(0x78)
						out[pos] = '0';
     764:	0280c001 	addi.w	$r1,$r0,48(0x30)
			else if(tmp == 'p' || tmp == 'x'){
     768:	0281e005 	addi.w	$r5,$r0,120(0x78)
			else if(tmp == 'd' ){
     76c:	02819009 	addi.w	$r9,$r0,100(0x64)
			else if(tmp == 's'){
     770:	0281cc0a 	addi.w	$r10,$r0,115(0x73)
			else if(tmp == 'c'){
     774:	02818c0b 	addi.w	$r11,$r0,99(0x63)
				for (long nn = num; nn /= 10; digits++);
     778:	02802813 	addi.w	$r19,$r0,10(0xa)
						out[pos] = '-';
     77c:	0280b419 	addi.w	$r25,$r0,45(0x2d)
     780:	50002c00 	b	44(0x2c) # 7ac <printf+0x18c>
			if(tmp == 'l') {
     784:	58001da7 	beq	$r13,$r7,28(0x1c) # 7a0 <printf+0x180>
			else if(tmp == 'p' || tmp == 'x'){
     788:	5803c1a6 	beq	$r13,$r6,960(0x3c0) # b48 <printf+0x528>
     78c:	580105a5 	beq	$r13,$r5,260(0x104) # 890 <printf+0x270>
			else if(tmp == 'd' ){
     790:	580331a9 	beq	$r13,$r9,816(0x330) # ac0 <printf+0x4a0>
			else if(tmp == 's'){
     794:	5803e1aa 	beq	$r13,$r10,992(0x3e0) # b74 <printf+0x554>
			else if(tmp == 'c'){
     798:	5802f9ab 	beq	$r13,$r11,760(0x2f8) # a90 <printf+0x470>
     79c:	03400000 	andi	$r0,$r0,0x0
	for (; *s; s++) {
     7a0:	02800484 	addi.w	$r4,$r4,1(0x1)
     7a4:	2800008d 	ld.b	$r13,$r4,0
     7a8:	400029a0 	beqz	$r13,40(0x28) # 7d0 <printf+0x1b0>
		if (format) {
     7ac:	47ffd9ff 	bnez	$r15,-40(0x7fffd8) # 784 <printf+0x164>
		} else if (*s == '%') {
     7b0:	580069a8 	beq	$r13,$r8,104(0x68) # 818 <printf+0x1f8>
			if (out && pos < n) {
     7b4:	6c000d90 	bgeu	$r12,$r16,12(0xc) # 7c0 <printf+0x1a0>
				out[pos] = *s;
     7b8:	0010325a 	add.w	$r26,$r18,$r12
     7bc:	2900034d 	st.b	$r13,$r26,0
	for (; *s; s++) {
     7c0:	02800484 	addi.w	$r4,$r4,1(0x1)
     7c4:	2800008d 	ld.b	$r13,$r4,0
			pos++;
     7c8:	0280058c 	addi.w	$r12,$r12,1(0x1)
	for (; *s; s++) {
     7cc:	47ffe1bf 	bnez	$r13,-32(0x7fffe0) # 7ac <printf+0x18c>
	if (out && pos < n) {
     7d0:	6c02a990 	bgeu	$r12,$r16,680(0x2a8) # a78 <printf+0x458>
		out[pos] = 0;
     7d4:	1c00004d 	pcaddu12i	$r13,2(0x2)
     7d8:	02a1c1ad 	addi.w	$r13,$r13,-1936(0x870)
     7dc:	001031ac 	add.w	$r12,$r13,$r12
     7e0:	29000180 	st.b	$r0,$r12,0
	uart_puts(out_buf);
     7e4:	1c000044 	pcaddu12i	$r4,2(0x2)
     7e8:	02a18084 	addi.w	$r4,$r4,-1952(0x860)
     7ec:	57fdf7ff 	bl	-524(0xffffdf4) # 5e0 <uart_puts>
	res = _vprintf(s, vl);
	va_end(vl);
	return res;
}
     7f0:	2880b061 	ld.w	$r1,$r3,44(0x2c)
     7f4:	001502e4 	move	$r4,$r23
     7f8:	2880a077 	ld.w	$r23,$r3,40(0x28)
     7fc:	28809078 	ld.w	$r24,$r3,36(0x24)
     800:	28808079 	ld.w	$r25,$r3,32(0x20)
     804:	2880707a 	ld.w	$r26,$r3,28(0x1c)
     808:	2880607b 	ld.w	$r27,$r3,24(0x18)
     80c:	2880507c 	ld.w	$r28,$r3,20(0x14)
     810:	02814063 	addi.w	$r3,$r3,80(0x50)
     814:	4c000020 	jirl	$r0,$r1,0
			format = 1;
     818:	0280040f 	addi.w	$r15,$r0,1(0x1)
     81c:	53ff87ff 	b	-124(0xfffff84) # 7a0 <printf+0x180>
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
     820:	0280120b 	addi.w	$r11,$r16,4(0x4)
     824:	28800210 	ld.w	$r16,$r16,0
				if (num < 0) {
     828:	60028a00 	blt	$r16,$r0,648(0x288) # ab0 <printf+0x490>
				for (long nn = num; nn /= 10; digits++);
     82c:	00204e0c 	div.w	$r12,$r16,$r19
     830:	5c000a60 	bne	$r19,$r0,8(0x8) # 838 <printf+0x218>
     834:	002a0007 	break	0x7
     838:	02800410 	addi.w	$r16,$r0,1(0x1)
     83c:	40002180 	beqz	$r12,32(0x20) # 85c <printf+0x23c>
     840:	00150190 	move	$r16,$r12
     844:	028005ef 	addi.w	$r15,$r15,1(0x1)
     848:	00204e0c 	div.w	$r12,$r16,$r19
     84c:	5c000a60 	bne	$r19,$r0,8(0x8) # 854 <printf+0x234>
     850:	002a0007 	break	0x7
     854:	47ffed9f 	bnez	$r12,-20(0x7fffec) # 840 <printf+0x220>
     858:	001501f0 	move	$r16,$r15
	for (; *s; s++) {
     85c:	02800652 	addi.w	$r18,$r18,1(0x1)
     860:	2800024c 	ld.b	$r12,$r18,0
				pos += digits;
     864:	001041ce 	add.w	$r14,$r14,$r16
				format = 0;
     868:	0015000f 	move	$r15,$r0
				pos += digits;
     86c:	00150170 	move	$r16,$r11
	for (; *s; s++) {
     870:	47fe319f 	bnez	$r12,-464(0x7ffe30) # 6a0 <printf+0x80>
     874:	53fe5fff 	b	-420(0xffffe5c) # 6d0 <printf+0xb0>
					pos++;
     878:	028009ce 	addi.w	$r14,$r14,2(0x2)
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
     87c:	02801210 	addi.w	$r16,$r16,4(0x4)
					pos++;
     880:	028021ce 	addi.w	$r14,$r14,8(0x8)
				format = 0;
     884:	0015000f 	move	$r15,$r0
     888:	53fea7ff 	b	-348(0xffffea4) # 72c <printf+0x10c>
     88c:	03400000 	andi	$r0,$r0,0x0
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
     890:	2880022d 	ld.w	$r13,$r17,0
     894:	02801231 	addi.w	$r17,$r17,4(0x4)
					if (out && pos < n) {
     898:	6c003190 	bgeu	$r12,$r16,48(0x30) # 8c8 <printf+0x2a8>
     89c:	0044f1ba 	srli.w	$r26,$r13,0x1c
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
     8a0:	0067834f 	bstrpick.w	$r15,$r26,0x7,0x0
     8a4:	02815dfc 	addi.w	$r28,$r15,87(0x57)
     8a8:	0012ea9a 	sltu	$r26,$r20,$r26
     8ac:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
     8b0:	00005f9c 	ext.w.b	$r28,$r28
     8b4:	0013e9ef 	masknez	$r15,$r15,$r26
     8b8:	00136b9a 	maskeqz	$r26,$r28,$r26
     8bc:	0010325b 	add.w	$r27,$r18,$r12
     8c0:	001569ef 	or	$r15,$r15,$r26
     8c4:	2900036f 	st.b	$r15,$r27,0
					pos++;
     8c8:	0280058f 	addi.w	$r15,$r12,1(0x1)
					if (out && pos < n) {
     8cc:	6c0031f0 	bgeu	$r15,$r16,48(0x30) # 8fc <printf+0x2dc>
					int d = (num >> (4*i)) & 0xF;
     8d0:	007be1ba 	bstrpick.w	$r26,$r13,0x1b,0x18
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
     8d4:	00103e5b 	add.w	$r27,$r18,$r15
     8d8:	0067834f 	bstrpick.w	$r15,$r26,0x7,0x0
     8dc:	02815dfc 	addi.w	$r28,$r15,87(0x57)
     8e0:	00126a9a 	slt	$r26,$r20,$r26
     8e4:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
     8e8:	00005f9c 	ext.w.b	$r28,$r28
     8ec:	0013e9ef 	masknez	$r15,$r15,$r26
     8f0:	00136b9a 	maskeqz	$r26,$r28,$r26
     8f4:	001569ef 	or	$r15,$r15,$r26
     8f8:	2900036f 	st.b	$r15,$r27,0
					pos++;
     8fc:	0280098f 	addi.w	$r15,$r12,2(0x2)
					if (out && pos < n) {
     900:	6c0031f0 	bgeu	$r15,$r16,48(0x30) # 930 <printf+0x310>
					int d = (num >> (4*i)) & 0xF;
     904:	0077d1ba 	bstrpick.w	$r26,$r13,0x17,0x14
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
     908:	00103e5b 	add.w	$r27,$r18,$r15
     90c:	0067834f 	bstrpick.w	$r15,$r26,0x7,0x0
     910:	02815dfc 	addi.w	$r28,$r15,87(0x57)
     914:	00126a9a 	slt	$r26,$r20,$r26
     918:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
     91c:	00005f9c 	ext.w.b	$r28,$r28
     920:	0013e9ef 	masknez	$r15,$r15,$r26
     924:	00136b9a 	maskeqz	$r26,$r28,$r26
     928:	001569ef 	or	$r15,$r15,$r26
     92c:	2900036f 	st.b	$r15,$r27,0
					pos++;
     930:	02800d8f 	addi.w	$r15,$r12,3(0x3)
					if (out && pos < n) {
     934:	6c0031f0 	bgeu	$r15,$r16,48(0x30) # 964 <printf+0x344>
					int d = (num >> (4*i)) & 0xF;
     938:	0073c1ba 	bstrpick.w	$r26,$r13,0x13,0x10
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
     93c:	00103e5b 	add.w	$r27,$r18,$r15
     940:	0067834f 	bstrpick.w	$r15,$r26,0x7,0x0
     944:	02815dfc 	addi.w	$r28,$r15,87(0x57)
     948:	00126a9a 	slt	$r26,$r20,$r26
     94c:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
     950:	00005f9c 	ext.w.b	$r28,$r28
     954:	0013e9ef 	masknez	$r15,$r15,$r26
     958:	00136b9a 	maskeqz	$r26,$r28,$r26
     95c:	001569ef 	or	$r15,$r15,$r26
     960:	2900036f 	st.b	$r15,$r27,0
					pos++;
     964:	0280118f 	addi.w	$r15,$r12,4(0x4)
					if (out && pos < n) {
     968:	6c0031f0 	bgeu	$r15,$r16,48(0x30) # 998 <printf+0x378>
					int d = (num >> (4*i)) & 0xF;
     96c:	006fb1ba 	bstrpick.w	$r26,$r13,0xf,0xc
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
     970:	00103e5b 	add.w	$r27,$r18,$r15
     974:	0067834f 	bstrpick.w	$r15,$r26,0x7,0x0
     978:	02815dfc 	addi.w	$r28,$r15,87(0x57)
     97c:	00126a9a 	slt	$r26,$r20,$r26
     980:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
     984:	00005f9c 	ext.w.b	$r28,$r28
     988:	0013e9ef 	masknez	$r15,$r15,$r26
     98c:	00136b9a 	maskeqz	$r26,$r28,$r26
     990:	001569ef 	or	$r15,$r15,$r26
     994:	2900036f 	st.b	$r15,$r27,0
					pos++;
     998:	0280158f 	addi.w	$r15,$r12,5(0x5)
					if (out && pos < n) {
     99c:	6c0031f0 	bgeu	$r15,$r16,48(0x30) # 9cc <printf+0x3ac>
					int d = (num >> (4*i)) & 0xF;
     9a0:	006ba1ba 	bstrpick.w	$r26,$r13,0xb,0x8
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
     9a4:	00103e5b 	add.w	$r27,$r18,$r15
     9a8:	0067834f 	bstrpick.w	$r15,$r26,0x7,0x0
     9ac:	02815dfc 	addi.w	$r28,$r15,87(0x57)
     9b0:	00126a9a 	slt	$r26,$r20,$r26
     9b4:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
     9b8:	00005f9c 	ext.w.b	$r28,$r28
     9bc:	0013e9ef 	masknez	$r15,$r15,$r26
     9c0:	00136b9a 	maskeqz	$r26,$r28,$r26
     9c4:	001569ef 	or	$r15,$r15,$r26
     9c8:	2900036f 	st.b	$r15,$r27,0
					pos++;
     9cc:	0280198f 	addi.w	$r15,$r12,6(0x6)
					if (out && pos < n) {
     9d0:	6c0031f0 	bgeu	$r15,$r16,48(0x30) # a00 <printf+0x3e0>
					int d = (num >> (4*i)) & 0xF;
     9d4:	006791ba 	bstrpick.w	$r26,$r13,0x7,0x4
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
     9d8:	00103e5b 	add.w	$r27,$r18,$r15
     9dc:	0067834f 	bstrpick.w	$r15,$r26,0x7,0x0
     9e0:	02815dfc 	addi.w	$r28,$r15,87(0x57)
     9e4:	00126a9a 	slt	$r26,$r20,$r26
     9e8:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
     9ec:	00005f9c 	ext.w.b	$r28,$r28
     9f0:	0013e9ef 	masknez	$r15,$r15,$r26
     9f4:	00136b9a 	maskeqz	$r26,$r28,$r26
     9f8:	001569ef 	or	$r15,$r15,$r26
     9fc:	2900036f 	st.b	$r15,$r27,0
					pos++;
     a00:	02801d8f 	addi.w	$r15,$r12,7(0x7)
					if (out && pos < n) {
     a04:	6c0031f0 	bgeu	$r15,$r16,48(0x30) # a34 <printf+0x414>
					int d = (num >> (4*i)) & 0xF;
     a08:	03403dad 	andi	$r13,$r13,0xf
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
     a0c:	00103e5a 	add.w	$r26,$r18,$r15
     a10:	006781af 	bstrpick.w	$r15,$r13,0x7,0x0
     a14:	02815dfb 	addi.w	$r27,$r15,87(0x57)
     a18:	0012368d 	slt	$r13,$r20,$r13
     a1c:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
     a20:	00005f7b 	ext.w.b	$r27,$r27
     a24:	0013b5ef 	masknez	$r15,$r15,$r13
     a28:	0013376d 	maskeqz	$r13,$r27,$r13
     a2c:	001535ed 	or	$r13,$r15,$r13
     a30:	2900034d 	st.b	$r13,$r26,0
					pos++;
     a34:	0280218c 	addi.w	$r12,$r12,8(0x8)
				format = 0;
     a38:	0015000f 	move	$r15,$r0
     a3c:	53fd67ff 	b	-668(0xffffd64) # 7a0 <printf+0x180>
				const char* s2 = va_arg(vl, const char*);
     a40:	2880020c 	ld.w	$r12,$r16,0
     a44:	02801210 	addi.w	$r16,$r16,4(0x4)
				while (*s2) {
     a48:	2800018f 	ld.b	$r15,$r12,0
     a4c:	4001ade0 	beqz	$r15,428(0x1ac) # bf8 <printf+0x5d8>
     a50:	028005ce 	addi.w	$r14,$r14,1(0x1)
     a54:	001131cb 	sub.w	$r11,$r14,$r12
					pos++;
     a58:	00102d8e 	add.w	$r14,$r12,$r11
					s2++;
     a5c:	0280058c 	addi.w	$r12,$r12,1(0x1)
				while (*s2) {
     a60:	2800018f 	ld.b	$r15,$r12,0
     a64:	47fff5ff 	bnez	$r15,-12(0x7ffff4) # a58 <printf+0x438>
	for (; *s; s++) {
     a68:	02800652 	addi.w	$r18,$r18,1(0x1)
     a6c:	2800024c 	ld.b	$r12,$r18,0
     a70:	47fc319f 	bnez	$r12,-976(0x7ffc30) # 6a0 <printf+0x80>
     a74:	53fc5fff 	b	-932(0xffffc5c) # 6d0 <printf+0xb0>
	} else if (out && n) {
     a78:	43fd6e1f 	beqz	$r16,-660(0x7ffd6c) # 7e4 <printf+0x1c4>
		out[n-1] = 0;
     a7c:	1c00002c 	pcaddu12i	$r12,1(0x1)
     a80:	0297218c 	addi.w	$r12,$r12,1480(0x5c8)
     a84:	0010398e 	add.w	$r14,$r12,$r14
     a88:	290001c0 	st.b	$r0,$r14,0
     a8c:	53fd5bff 	b	-680(0xffffd58) # 7e4 <printf+0x1c4>
				if (out && pos < n) {
     a90:	6c001590 	bgeu	$r12,$r16,20(0x14) # aa4 <printf+0x484>
					out[pos] = (char)va_arg(vl,int);
     a94:	2880022f 	ld.w	$r15,$r17,0
     a98:	0010324d 	add.w	$r13,$r18,$r12
     a9c:	02801231 	addi.w	$r17,$r17,4(0x4)
     aa0:	290001af 	st.b	$r15,$r13,0
				pos++;
     aa4:	0280058c 	addi.w	$r12,$r12,1(0x1)
				format = 0;
     aa8:	0015000f 	move	$r15,$r0
     aac:	53fcf7ff 	b	-780(0xffffcf4) # 7a0 <printf+0x180>
					num = -num;
     ab0:	00114010 	sub.w	$r16,$r0,$r16
					pos++;
     ab4:	028005ce 	addi.w	$r14,$r14,1(0x1)
     ab8:	53fd77ff 	b	-652(0xffffd74) # 82c <printf+0x20c>
     abc:	03400000 	andi	$r0,$r0,0x0
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
     ac0:	2880023a 	ld.w	$r26,$r17,0
     ac4:	02801231 	addi.w	$r17,$r17,4(0x4)
				if (num < 0) {
     ac8:	60011b40 	blt	$r26,$r0,280(0x118) # be0 <printf+0x5c0>
				for (long nn = num; nn /= 10; digits++);
     acc:	00204f4d 	div.w	$r13,$r26,$r19
     ad0:	5c000a60 	bne	$r19,$r0,8(0x8) # ad8 <printf+0x4b8>
     ad4:	002a0007 	break	0x7
     ad8:	44000da0 	bnez	$r13,12(0xc) # ae4 <printf+0x4c4>
     adc:	50012400 	b	292(0x124) # c00 <printf+0x5e0>
     ae0:	0015036f 	move	$r15,$r27
     ae4:	001501bc 	move	$r28,$r13
     ae8:	028005fb 	addi.w	$r27,$r15,1(0x1)
     aec:	00204f8d 	div.w	$r13,$r28,$r19
     af0:	5c000a60 	bne	$r19,$r0,8(0x8) # af8 <printf+0x4d8>
     af4:	002a0007 	break	0x7
     af8:	47ffe9bf 	bnez	$r13,-24(0x7fffe8) # ae0 <printf+0x4c0>
				for (int i = digits-1; i >= 0; i--) {
     afc:	001031ed 	add.w	$r13,$r15,$r12
     b00:	50000800 	b	8(0x8) # b08 <printf+0x4e8>
     b04:	001501ed 	move	$r13,$r15
						out[pos + i] = '0' + (num % 10);
     b08:	0010365c 	add.w	$r28,$r18,$r13
					if (out && pos + i < n) {
     b0c:	6c0019b0 	bgeu	$r13,$r16,24(0x18) # b24 <printf+0x504>
						out[pos + i] = '0' + (num % 10);
     b10:	0020cf4f 	mod.w	$r15,$r26,$r19
     b14:	5c000a60 	bne	$r19,$r0,8(0x8) # b1c <printf+0x4fc>
     b18:	002a0007 	break	0x7
     b1c:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
     b20:	2900038f 	st.b	$r15,$r28,0
					num /= 10;
     b24:	0015035c 	move	$r28,$r26
     b28:	02bffdaf 	addi.w	$r15,$r13,-1(0xfff)
     b2c:	00204f9a 	div.w	$r26,$r28,$r19
     b30:	5c000a60 	bne	$r19,$r0,8(0x8) # b38 <printf+0x518>
     b34:	002a0007 	break	0x7
				for (int i = digits-1; i >= 0; i--) {
     b38:	5fffcd8d 	bne	$r12,$r13,-52(0x3ffcc) # b04 <printf+0x4e4>
				pos += digits;
     b3c:	00106d8c 	add.w	$r12,$r12,$r27
				format = 0;
     b40:	0015000f 	move	$r15,$r0
     b44:	53fc5fff 	b	-932(0xffffc5c) # 7a0 <printf+0x180>
					if (out && pos < n) {
     b48:	6c000d90 	bgeu	$r12,$r16,12(0xc) # b54 <printf+0x534>
						out[pos] = '0';
     b4c:	0010324d 	add.w	$r13,$r18,$r12
     b50:	290001a1 	st.b	$r1,$r13,0
					pos++;
     b54:	0280058d 	addi.w	$r13,$r12,1(0x1)
					if (out && pos < n) {
     b58:	6c000db0 	bgeu	$r13,$r16,12(0xc) # b64 <printf+0x544>
						out[pos] = 'x';
     b5c:	0010364d 	add.w	$r13,$r18,$r13
     b60:	290001b8 	st.b	$r24,$r13,0
					pos++;
     b64:	2880022d 	ld.w	$r13,$r17,0
     b68:	0280098c 	addi.w	$r12,$r12,2(0x2)
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
     b6c:	02801231 	addi.w	$r17,$r17,4(0x4)
     b70:	53fd2bff 	b	-728(0xffffd28) # 898 <printf+0x278>
				const char* s2 = va_arg(vl, const char*);
     b74:	2880023b 	ld.w	$r27,$r17,0
     b78:	02801231 	addi.w	$r17,$r17,4(0x4)
				while (*s2) {
     b7c:	2800036f 	ld.b	$r15,$r27,0
     b80:	400049e0 	beqz	$r15,72(0x48) # bc8 <printf+0x5a8>
     b84:	0015018d 	move	$r13,$r12
						out[pos] = *s2;
     b88:	0010365a 	add.w	$r26,$r18,$r13
					if (out && pos < n) {
     b8c:	6c0025b0 	bgeu	$r13,$r16,36(0x24) # bb0 <printf+0x590>
					pos++;
     b90:	028005ad 	addi.w	$r13,$r13,1(0x1)
						out[pos] = *s2;
     b94:	2900034f 	st.b	$r15,$r26,0
				while (*s2) {
     b98:	001131af 	sub.w	$r15,$r13,$r12
     b9c:	00103f6f 	add.w	$r15,$r27,$r15
     ba0:	280001ef 	ld.b	$r15,$r15,0
     ba4:	47ffe5ff 	bnez	$r15,-28(0x7fffe4) # b88 <printf+0x568>
					pos++;
     ba8:	001501ac 	move	$r12,$r13
     bac:	53fbf7ff 	b	-1036(0xffffbf4) # 7a0 <printf+0x180>
     bb0:	028005ad 	addi.w	$r13,$r13,1(0x1)
				while (*s2) {
     bb4:	001131af 	sub.w	$r15,$r13,$r12
     bb8:	00103f6f 	add.w	$r15,$r27,$r15
     bbc:	280001ef 	ld.b	$r15,$r15,0
     bc0:	47ffc9ff 	bnez	$r15,-56(0x7fffc8) # b88 <printf+0x568>
					pos++;
     bc4:	001501ac 	move	$r12,$r13
				format = 0;
     bc8:	0015000f 	move	$r15,$r0
     bcc:	53fbd7ff 	b	-1068(0xffffbd4) # 7a0 <printf+0x180>
	size_t pos = 0;
     bd0:	0015000c 	move	$r12,$r0
	return pos;
     bd4:	00150017 	move	$r23,$r0
     bd8:	53fbffff 	b	-1028(0xffffbfc) # 7d4 <printf+0x1b4>
     bdc:	03400000 	andi	$r0,$r0,0x0
					num = -num;
     be0:	0011681a 	sub.w	$r26,$r0,$r26
					if (out && pos < n) {
     be4:	6c000d90 	bgeu	$r12,$r16,12(0xc) # bf0 <printf+0x5d0>
						out[pos] = '-';
     be8:	0010324d 	add.w	$r13,$r18,$r12
     bec:	290001b9 	st.b	$r25,$r13,0
					pos++;
     bf0:	0280058c 	addi.w	$r12,$r12,1(0x1)
     bf4:	53fedbff 	b	-296(0xffffed8) # acc <printf+0x4ac>
				format = 0;
     bf8:	0015000f 	move	$r15,$r0
     bfc:	53facbff 	b	-1336(0xffffac8) # 6c4 <printf+0xa4>
				for (long nn = num; nn /= 10; digits++);
     c00:	0015000f 	move	$r15,$r0
     c04:	0280041b 	addi.w	$r27,$r0,1(0x1)
     c08:	53fef7ff 	b	-268(0xffffef4) # afc <printf+0x4dc>
     c0c:	03400000 	andi	$r0,$r0,0x0

00000c10 <panic>:

void panic(char *s)
{
     c10:	02bfc063 	addi.w	$r3,$r3,-16(0xff0)
     c14:	29802077 	st.w	$r23,$r3,8(0x8)
     c18:	00150097 	move	$r23,$r4
	printf("panic: ");
     c1c:	1c000024 	pcaddu12i	$r4,1(0x1)
     c20:	02a4c084 	addi.w	$r4,$r4,-1744(0x930)
{
     c24:	29803061 	st.w	$r1,$r3,12(0xc)
	printf("panic: ");
     c28:	57f9fbff 	bl	-1544(0xffff9f8) # 620 <printf>
	printf(s);
     c2c:	001502e4 	move	$r4,$r23
     c30:	57f9f3ff 	bl	-1552(0xffff9f0) # 620 <printf>
	printf("\n");
     c34:	1c000024 	pcaddu12i	$r4,1(0x1)
     c38:	02a8c084 	addi.w	$r4,$r4,-1488(0xa30)
     c3c:	57f9e7ff 	bl	-1564(0xffff9e4) # 620 <printf>
	while(1){};
     c40:	50000000 	b	0 # c40 <panic+0x30>
     c44:	03400000 	andi	$r0,$r0,0x0
     c48:	03400000 	andi	$r0,$r0,0x0
     c4c:	03400000 	andi	$r0,$r0,0x0

00000c50 <page_init>:
 *  HEAP_START(BSS_END)
 *
 *  Note: _alloc_end may equal to _memory_end.
 */
void page_init()
{
     c50:	02bfc063 	addi.w	$r3,$r3,-16(0xff0)
     c54:	29801078 	st.w	$r24,$r3,4(0x4)
	ptr_t _heap_start_aligned = _align_page(HEAP_START);
     c58:	1c000038 	pcaddu12i	$r24,1(0x1)
     c5c:	288f8318 	ld.w	$r24,$r24,992(0x3e0)
     c60:	28800305 	ld.w	$r5,$r24,0
	 * We assume LENGTH_RAM should not be too small, ideally no less
	 * than 16M (i.e. PAGE_SIZE * PAGE_SIZE).
	 */
	uint32_t num_reserved_pages = LENGTH_RAM / (PAGE_SIZE * PAGE_SIZE);

	_num_pages = (HEAP_SIZE - (_heap_start_aligned - HEAP_START))/ PAGE_SIZE - num_reserved_pages;
     c64:	1c00002c 	pcaddu12i	$r12,1(0x1)
     c68:	288f218c 	ld.w	$r12,$r12,968(0x3c8)
     c6c:	28800187 	ld.w	$r7,$r12,0
{
     c70:	29802077 	st.w	$r23,$r3,8(0x8)
	return (address + order) & (~order);
     c74:	03bffc17 	ori	$r23,$r0,0xfff
     c78:	15ffffed 	lu12i.w	$r13,-1(0xfffff)
     c7c:	00105cb7 	add.w	$r23,$r5,$r23
     c80:	0014b6f7 	and	$r23,$r23,$r13
	_num_pages = (HEAP_SIZE - (_heap_start_aligned - HEAP_START))/ PAGE_SIZE - num_reserved_pages;
     c84:	00101cac 	add.w	$r12,$r5,$r7
     c88:	00115d8c 	sub.w	$r12,$r12,$r23
     c8c:	0044b18c 	srli.w	$r12,$r12,0xc
     c90:	02bfe18c 	addi.w	$r12,$r12,-8(0xff8)
{
     c94:	29800079 	st.w	$r25,$r3,0
     c98:	29803061 	st.w	$r1,$r3,12(0xc)
	_num_pages = (HEAP_SIZE - (_heap_start_aligned - HEAP_START))/ PAGE_SIZE - num_reserved_pages;
     c9c:	1c000039 	pcaddu12i	$r25,1(0x1)
     ca0:	029e4339 	addi.w	$r25,$r25,1936(0x790)
	printf("HEAP_START = %p(aligned to %p), HEAP_SIZE = 0x%lx,\n"
     ca4:	02802008 	addi.w	$r8,$r0,8(0x8)
     ca8:	1c000024 	pcaddu12i	$r4,1(0x1)
     cac:	02a2b084 	addi.w	$r4,$r4,-1876(0x8ac)
     cb0:	001502e6 	move	$r6,$r23
     cb4:	00150189 	move	$r9,$r12
	_num_pages = (HEAP_SIZE - (_heap_start_aligned - HEAP_START))/ PAGE_SIZE - num_reserved_pages;
     cb8:	2980032c 	st.w	$r12,$r25,0
	printf("HEAP_START = %p(aligned to %p), HEAP_SIZE = 0x%lx,\n"
     cbc:	57f967ff 	bl	-1692(0xffff964) # 620 <printf>
	 * We use HEAP_START, not _heap_start_aligned as begin address for
	 * allocating struct Page, because we have no requirement of alignment
	 * for position of struct Page.
	 */
	struct Page *page = (struct Page *)HEAP_START;
	for (int i = 0; i < _num_pages; i++) {
     cc0:	2880032e 	ld.w	$r14,$r25,0
	struct Page *page = (struct Page *)HEAP_START;
     cc4:	2880030d 	ld.w	$r13,$r24,0
	for (int i = 0; i < _num_pages; i++) {
     cc8:	4000ddc0 	beqz	$r14,220(0xdc) # da4 <page_init+0x154>
     ccc:	0011340c 	sub.w	$r12,$r0,$r13
     cd0:	03400d8c 	andi	$r12,$r12,0x3
     cd4:	02800d8f 	addi.w	$r15,$r12,3(0x3)
     cd8:	024015f0 	sltui	$r16,$r15,5(0x5)
     cdc:	02801412 	addi.w	$r18,$r0,5(0x5)
     ce0:	0013c1ef 	masknez	$r15,$r15,$r16
     ce4:	00134250 	maskeqz	$r16,$r18,$r16
     ce8:	02bffdd1 	addi.w	$r17,$r14,-1(0xfff)
     cec:	001541ef 	or	$r15,$r15,$r16
     cf0:	6801922f 	bltu	$r17,$r15,400(0x190) # e80 <page_init+0x230>
	struct Page *page = (struct Page *)HEAP_START;
     cf4:	001501b2 	move	$r18,$r13
	for (int i = 0; i < _num_pages; i++) {
     cf8:	0015000f 	move	$r15,$r0
     cfc:	40003580 	beqz	$r12,52(0x34) # d30 <page_init+0xe0>
	page->flags = 0;
     d00:	290001a0 	st.b	$r0,$r13,0
	for (int i = 0; i < _num_pages; i++) {
     d04:	0280040f 	addi.w	$r15,$r0,1(0x1)
		_clear(page);
		page++;	
     d08:	028005b2 	addi.w	$r18,$r13,1(0x1)
     d0c:	5800258f 	beq	$r12,$r15,36(0x24) # d30 <page_init+0xe0>
	page->flags = 0;
     d10:	290005a0 	st.b	$r0,$r13,1(0x1)
		page++;	
     d14:	02800c10 	addi.w	$r16,$r0,3(0x3)
     d18:	028009b2 	addi.w	$r18,$r13,2(0x2)
	for (int i = 0; i < _num_pages; i++) {
     d1c:	0280080f 	addi.w	$r15,$r0,2(0x2)
     d20:	5c001190 	bne	$r12,$r16,16(0x10) # d30 <page_init+0xe0>
	page->flags = 0;
     d24:	290009a0 	st.b	$r0,$r13,2(0x2)
		page++;	
     d28:	02800db2 	addi.w	$r18,$r13,3(0x3)
	for (int i = 0; i < _num_pages; i++) {
     d2c:	02800c0f 	addi.w	$r15,$r0,3(0x3)
     d30:	001131d1 	sub.w	$r17,$r14,$r12
     d34:	001031ac 	add.w	$r12,$r13,$r12
     d38:	00448a2d 	srli.w	$r13,$r17,0x2
     d3c:	0004b1ad 	alsl.w	$r13,$r13,$r12,0x2
	page->flags = 0;
     d40:	29800180 	st.w	$r0,$r12,0
		page++;	
     d44:	0280118c 	addi.w	$r12,$r12,4(0x4)
     d48:	5ffff98d 	bne	$r12,$r13,-8(0x3fff8) # d40 <page_init+0xf0>
     d4c:	02bff010 	addi.w	$r16,$r0,-4(0xffc)
     d50:	0014c230 	and	$r16,$r17,$r16
     d54:	0010424d 	add.w	$r13,$r18,$r16
     d58:	00103e0c 	add.w	$r12,$r16,$r15
     d5c:	58004630 	beq	$r17,$r16,68(0x44) # da0 <page_init+0x150>
	page->flags = 0;
     d60:	290001a0 	st.b	$r0,$r13,0
	for (int i = 0; i < _num_pages; i++) {
     d64:	0280058f 	addi.w	$r15,$r12,1(0x1)
     d68:	6c0039ee 	bgeu	$r15,$r14,56(0x38) # da0 <page_init+0x150>
	page->flags = 0;
     d6c:	290005a0 	st.b	$r0,$r13,1(0x1)
	for (int i = 0; i < _num_pages; i++) {
     d70:	0280098f 	addi.w	$r15,$r12,2(0x2)
     d74:	6c002dee 	bgeu	$r15,$r14,44(0x2c) # da0 <page_init+0x150>
	page->flags = 0;
     d78:	290009a0 	st.b	$r0,$r13,2(0x2)
	for (int i = 0; i < _num_pages; i++) {
     d7c:	02800d8f 	addi.w	$r15,$r12,3(0x3)
     d80:	6c0021ee 	bgeu	$r15,$r14,32(0x20) # da0 <page_init+0x150>
	page->flags = 0;
     d84:	29000da0 	st.b	$r0,$r13,3(0x3)
	for (int i = 0; i < _num_pages; i++) {
     d88:	0280118f 	addi.w	$r15,$r12,4(0x4)
     d8c:	6c0015ee 	bgeu	$r15,$r14,20(0x14) # da0 <page_init+0x150>
	page->flags = 0;
     d90:	290011a0 	st.b	$r0,$r13,4(0x4)
	for (int i = 0; i < _num_pages; i++) {
     d94:	0280158c 	addi.w	$r12,$r12,5(0x5)
     d98:	6c00098e 	bgeu	$r12,$r14,8(0x8) # da0 <page_init+0x150>
	page->flags = 0;
     d9c:	290015a0 	st.b	$r0,$r13,5(0x5)
		page++;	
     da0:	0040b1ce 	slli.w	$r14,$r14,0xc
	}

	_alloc_start = _heap_start_aligned + num_reserved_pages * PAGE_SIZE;
	_alloc_end = _alloc_start + (PAGE_SIZE * _num_pages);

	printf("TEXT:   %p -> %p\n", TEXT_START, TEXT_END);
     da4:	1c00002f 	pcaddu12i	$r15,1(0x1)
     da8:	2889e1ef 	ld.w	$r15,$r15,632(0x278)
     dac:	1c00002d 	pcaddu12i	$r13,1(0x1)
     db0:	2889e1ad 	ld.w	$r13,$r13,632(0x278)
     db4:	288001e6 	ld.w	$r6,$r15,0
	_alloc_start = _heap_start_aligned + num_reserved_pages * PAGE_SIZE;
     db8:	1400010c 	lu12i.w	$r12,8(0x8)
	printf("TEXT:   %p -> %p\n", TEXT_START, TEXT_END);
     dbc:	288001a5 	ld.w	$r5,$r13,0
	_alloc_start = _heap_start_aligned + num_reserved_pages * PAGE_SIZE;
     dc0:	001032f7 	add.w	$r23,$r23,$r12
	_alloc_end = _alloc_start + (PAGE_SIZE * _num_pages);
     dc4:	00103aee 	add.w	$r14,$r23,$r14
	_alloc_start = _heap_start_aligned + num_reserved_pages * PAGE_SIZE;
     dc8:	1c000038 	pcaddu12i	$r24,1(0x1)
     dcc:	0299b318 	addi.w	$r24,$r24,1644(0x66c)
	_alloc_end = _alloc_start + (PAGE_SIZE * _num_pages);
     dd0:	1c000039 	pcaddu12i	$r25,1(0x1)
     dd4:	02998339 	addi.w	$r25,$r25,1632(0x660)
	printf("TEXT:   %p -> %p\n", TEXT_START, TEXT_END);
     dd8:	1c000004 	pcaddu12i	$r4,0
     ddc:	029fe084 	addi.w	$r4,$r4,2040(0x7f8)
	_alloc_end = _alloc_start + (PAGE_SIZE * _num_pages);
     de0:	2980032e 	st.w	$r14,$r25,0
	_alloc_start = _heap_start_aligned + num_reserved_pages * PAGE_SIZE;
     de4:	29800317 	st.w	$r23,$r24,0
	printf("TEXT:   %p -> %p\n", TEXT_START, TEXT_END);
     de8:	57f83bff 	bl	-1992(0xffff838) # 620 <printf>
	printf("RODATA: %p -> %p\n", RODATA_START, RODATA_END);
     dec:	1c00002d 	pcaddu12i	$r13,1(0x1)
     df0:	2888f1ad 	ld.w	$r13,$r13,572(0x23c)
     df4:	1c00002c 	pcaddu12i	$r12,1(0x1)
     df8:	2888f18c 	ld.w	$r12,$r12,572(0x23c)
     dfc:	288001a6 	ld.w	$r6,$r13,0
     e00:	28800185 	ld.w	$r5,$r12,0
     e04:	1c000004 	pcaddu12i	$r4,0
     e08:	029f8084 	addi.w	$r4,$r4,2016(0x7e0)
     e0c:	57f817ff 	bl	-2028(0xffff814) # 620 <printf>
	printf("DATA:   %p -> %p\n", DATA_START, DATA_END);
     e10:	1c00002d 	pcaddu12i	$r13,1(0x1)
     e14:	288841ad 	ld.w	$r13,$r13,528(0x210)
     e18:	1c00002c 	pcaddu12i	$r12,1(0x1)
     e1c:	2888718c 	ld.w	$r12,$r12,540(0x21c)
     e20:	288001a6 	ld.w	$r6,$r13,0
     e24:	28800185 	ld.w	$r5,$r12,0
     e28:	1c000004 	pcaddu12i	$r4,0
     e2c:	029f4084 	addi.w	$r4,$r4,2000(0x7d0)
     e30:	57f7f3ff 	bl	-2064(0xffff7f0) # 620 <printf>
	printf("BSS:    %p -> %p\n", BSS_START, BSS_END);
     e34:	1c00002d 	pcaddu12i	$r13,1(0x1)
     e38:	288781ad 	ld.w	$r13,$r13,480(0x1e0)
     e3c:	1c00002c 	pcaddu12i	$r12,1(0x1)
     e40:	2887718c 	ld.w	$r12,$r12,476(0x1dc)
     e44:	288001a6 	ld.w	$r6,$r13,0
     e48:	28800185 	ld.w	$r5,$r12,0
     e4c:	1c000004 	pcaddu12i	$r4,0
     e50:	029f0084 	addi.w	$r4,$r4,1984(0x7c0)
     e54:	57f7cfff 	bl	-2100(0xffff7cc) # 620 <printf>
	printf("HEAP:   %p -> %p\n", _alloc_start, _alloc_end);
     e58:	28800326 	ld.w	$r6,$r25,0
     e5c:	28800305 	ld.w	$r5,$r24,0
}
     e60:	28803061 	ld.w	$r1,$r3,12(0xc)
     e64:	28802077 	ld.w	$r23,$r3,8(0x8)
     e68:	28801078 	ld.w	$r24,$r3,4(0x4)
     e6c:	28800079 	ld.w	$r25,$r3,0
	printf("HEAP:   %p -> %p\n", _alloc_start, _alloc_end);
     e70:	1c000004 	pcaddu12i	$r4,0
     e74:	029ec084 	addi.w	$r4,$r4,1968(0x7b0)
}
     e78:	02804063 	addi.w	$r3,$r3,16(0x10)
	printf("HEAP:   %p -> %p\n", _alloc_start, _alloc_end);
     e7c:	53f7a7ff 	b	-2140(0xffff7a4) # 620 <printf>
	for (int i = 0; i < _num_pages; i++) {
     e80:	0015000c 	move	$r12,$r0
     e84:	53fedfff 	b	-292(0xffffedc) # d60 <page_init+0x110>
     e88:	03400000 	andi	$r0,$r0,0x0
     e8c:	03400000 	andi	$r0,$r0,0x0

00000e90 <page_alloc>:
void *page_alloc(int npages)
{
	/* Note we are searching the page descriptor bitmaps. */
	int found = 0;
	struct Page *page_i = (struct Page *)HEAP_START;
	for (int i = 0; i <= (_num_pages - npages); i++) {
     e90:	1c00002e 	pcaddu12i	$r14,1(0x1)
     e94:	029671ce 	addi.w	$r14,$r14,1436(0x59c)
	struct Page *page_i = (struct Page *)HEAP_START;
     e98:	1c00002d 	pcaddu12i	$r13,1(0x1)
     e9c:	288681ad 	ld.w	$r13,$r13,416(0x1a0)
	for (int i = 0; i <= (_num_pages - npages); i++) {
     ea0:	288001d2 	ld.w	$r18,$r14,0
	struct Page *page_i = (struct Page *)HEAP_START;
     ea4:	288001ad 	ld.w	$r13,$r13,0
	for (int i = 0; i <= (_num_pages - npages); i++) {
     ea8:	0015000c 	move	$r12,$r0
			/* 
			 * meet a free page, continue to check if following
			 * (npages - 1) pages are also unallocated.
			 */
			struct Page *page_j = page_i + 1;
			for (int j = i + 1; j < (i + npages); j++) {
     eac:	02800405 	addi.w	$r5,$r0,1(0x1)
	for (int i = 0; i <= (_num_pages - npages); i++) {
     eb0:	00111252 	sub.w	$r18,$r18,$r4
		if (_is_free(page_i)) {
     eb4:	2a0001af 	ld.bu	$r15,$r13,0
	if (page->flags & PAGE_TAKEN) {
     eb8:	028005ae 	addi.w	$r14,$r13,1(0x1)
     ebc:	034005f0 	andi	$r16,$r15,0x1
     ec0:	44003e00 	bnez	$r16,60(0x3c) # efc <page_alloc+0x6c>
			for (int j = i + 1; j < (i + npages); j++) {
     ec4:	00103093 	add.w	$r19,$r4,$r12
     ec8:	640048a4 	bge	$r5,$r4,72(0x48) # f10 <page_alloc+0x80>
	if (page->flags & PAGE_TAKEN) {
     ecc:	2a0005b0 	ld.bu	$r16,$r13,1(0x1)
     ed0:	03400610 	andi	$r16,$r16,0x1
     ed4:	44002a00 	bnez	$r16,40(0x28) # efc <page_alloc+0x6c>
			struct Page *page_j = page_i + 1;
     ed8:	001501d0 	move	$r16,$r14
     edc:	001501b4 	move	$r20,$r13
				if (!_is_free(page_j)) {
					found = 0;
					break;
				}
				page_j++;
     ee0:	02800610 	addi.w	$r16,$r16,1(0x1)
			for (int j = i + 1; j < (i + npages); j++) {
     ee4:	00103211 	add.w	$r17,$r16,$r12
     ee8:	00115231 	sub.w	$r17,$r17,$r20
     eec:	64002633 	bge	$r17,$r19,36(0x24) # f10 <page_alloc+0x80>
	if (page->flags & PAGE_TAKEN) {
     ef0:	2a000211 	ld.bu	$r17,$r16,0
     ef4:	03400631 	andi	$r17,$r17,0x1
     ef8:	43ffea3f 	beqz	$r17,-24(0x7fffe8) # ee0 <page_alloc+0x50>
				page_k--;
				_set_flag(page_k, PAGE_LAST);
				return (void *)(_alloc_start + i * PAGE_SIZE);
			}
		}
		page_i++;
     efc:	0280058c 	addi.w	$r12,$r12,1(0x1)
     f00:	001501cd 	move	$r13,$r14
	for (int i = 0; i <= (_num_pages - npages); i++) {
     f04:	6fffb24c 	bgeu	$r18,$r12,-80(0x3ffb0) # eb4 <page_alloc+0x24>
	}
	return NULL;
     f08:	00150004 	move	$r4,$r0
}
     f0c:	4c000020 	jirl	$r0,$r1,0
				for (int k = i; k < (i + npages); k++) {
     f10:	64017193 	bge	$r12,$r19,368(0x170) # 1080 <page_alloc+0x1f0>
     f14:	00113410 	sub.w	$r16,$r0,$r13
     f18:	03400e10 	andi	$r16,$r16,0x3
     f1c:	02800e11 	addi.w	$r17,$r16,3(0x3)
     f20:	02401634 	sltui	$r20,$r17,5(0x5)
     f24:	02801405 	addi.w	$r5,$r0,5(0x5)
     f28:	0013d231 	masknez	$r17,$r17,$r20
     f2c:	02bffe72 	addi.w	$r18,$r19,-1(0xfff)
     f30:	001350b4 	maskeqz	$r20,$r5,$r20
     f34:	00113252 	sub.w	$r18,$r18,$r12
     f38:	00155231 	or	$r17,$r17,$r20
     f3c:	68013a51 	bltu	$r18,$r17,312(0x138) # 1074 <page_alloc+0x1e4>
     f40:	00150192 	move	$r18,$r12
     f44:	001501b1 	move	$r17,$r13
     f48:	40004e00 	beqz	$r16,76(0x4c) # f94 <page_alloc+0x104>
	page->flags |= flags;
     f4c:	038005ef 	ori	$r15,$r15,0x1
     f50:	02800414 	addi.w	$r20,$r0,1(0x1)
     f54:	290001af 	st.b	$r15,$r13,0
					page_k++;
     f58:	001501d1 	move	$r17,$r14
				for (int k = i; k < (i + npages); k++) {
     f5c:	02800592 	addi.w	$r18,$r12,1(0x1)
     f60:	58003614 	beq	$r16,$r20,52(0x34) # f94 <page_alloc+0x104>
	page->flags |= flags;
     f64:	2a0005ae 	ld.bu	$r14,$r13,1(0x1)
     f68:	02800c0f 	addi.w	$r15,$r0,3(0x3)
					page_k++;
     f6c:	028009b1 	addi.w	$r17,$r13,2(0x2)
	page->flags |= flags;
     f70:	038005ce 	ori	$r14,$r14,0x1
     f74:	290005ae 	st.b	$r14,$r13,1(0x1)
				for (int k = i; k < (i + npages); k++) {
     f78:	02800992 	addi.w	$r18,$r12,2(0x2)
     f7c:	5c001a0f 	bne	$r16,$r15,24(0x18) # f94 <page_alloc+0x104>
	page->flags |= flags;
     f80:	2a0009ae 	ld.bu	$r14,$r13,2(0x2)
					page_k++;
     f84:	02800db1 	addi.w	$r17,$r13,3(0x3)
				for (int k = i; k < (i + npages); k++) {
     f88:	02800d92 	addi.w	$r18,$r12,3(0x3)
	page->flags |= flags;
     f8c:	038005ce 	ori	$r14,$r14,0x1
     f90:	290009ae 	st.b	$r14,$r13,2(0x2)
					page_k++;
     f94:	00114086 	sub.w	$r6,$r4,$r16
     f98:	001041af 	add.w	$r15,$r13,$r16
	page->flags |= flags;
     f9c:	14020205 	lu12i.w	$r5,4112(0x1010)
     fa0:	004488d4 	srli.w	$r20,$r6,0x2
				for (int k = i; k < (i + npages); k++) {
     fa4:	001501f0 	move	$r16,$r15
	page->flags |= flags;
     fa8:	038404a5 	ori	$r5,$r5,0x101
     fac:	0004be94 	alsl.w	$r20,$r20,$r15,0x2
     fb0:	288001ee 	ld.w	$r14,$r15,0
     fb4:	02801210 	addi.w	$r16,$r16,4(0x4)
     fb8:	028011ef 	addi.w	$r15,$r15,4(0x4)
     fbc:	001515ce 	or	$r14,$r14,$r5
     fc0:	29bff20e 	st.w	$r14,$r16,-4(0xffc)
					page_k++;
     fc4:	5fffedf4 	bne	$r15,$r20,-20(0x3ffec) # fb0 <page_alloc+0x120>
     fc8:	02bff014 	addi.w	$r20,$r0,-4(0xffc)
     fcc:	0014d0d4 	and	$r20,$r6,$r20
     fd0:	0044e1ce 	srli.w	$r14,$r14,0x18
     fd4:	0010522f 	add.w	$r15,$r17,$r20
     fd8:	00104a90 	add.w	$r16,$r20,$r18
     fdc:	580074d4 	beq	$r6,$r20,116(0x74) # 1050 <page_alloc+0x1c0>
	page->flags |= flags;
     fe0:	2a0001ee 	ld.bu	$r14,$r15,0
				for (int k = i; k < (i + npages); k++) {
     fe4:	02800611 	addi.w	$r17,$r16,1(0x1)
	page->flags |= flags;
     fe8:	038005ce 	ori	$r14,$r14,0x1
     fec:	290001ee 	st.b	$r14,$r15,0
				for (int k = i; k < (i + npages); k++) {
     ff0:	64006233 	bge	$r17,$r19,96(0x60) # 1050 <page_alloc+0x1c0>
	page->flags |= flags;
     ff4:	2a0005ee 	ld.bu	$r14,$r15,1(0x1)
				for (int k = i; k < (i + npages); k++) {
     ff8:	02800a11 	addi.w	$r17,$r16,2(0x2)
	page->flags |= flags;
     ffc:	038005ce 	ori	$r14,$r14,0x1
    1000:	290005ee 	st.b	$r14,$r15,1(0x1)
				for (int k = i; k < (i + npages); k++) {
    1004:	64004e33 	bge	$r17,$r19,76(0x4c) # 1050 <page_alloc+0x1c0>
	page->flags |= flags;
    1008:	2a0009ee 	ld.bu	$r14,$r15,2(0x2)
				for (int k = i; k < (i + npages); k++) {
    100c:	02800e11 	addi.w	$r17,$r16,3(0x3)
	page->flags |= flags;
    1010:	038005ce 	ori	$r14,$r14,0x1
    1014:	290009ee 	st.b	$r14,$r15,2(0x2)
				for (int k = i; k < (i + npages); k++) {
    1018:	64003a33 	bge	$r17,$r19,56(0x38) # 1050 <page_alloc+0x1c0>
	page->flags |= flags;
    101c:	2a000dee 	ld.bu	$r14,$r15,3(0x3)
				for (int k = i; k < (i + npages); k++) {
    1020:	02801211 	addi.w	$r17,$r16,4(0x4)
	page->flags |= flags;
    1024:	038005ce 	ori	$r14,$r14,0x1
    1028:	29000dee 	st.b	$r14,$r15,3(0x3)
				for (int k = i; k < (i + npages); k++) {
    102c:	64002633 	bge	$r17,$r19,36(0x24) # 1050 <page_alloc+0x1c0>
	page->flags |= flags;
    1030:	2a0011ee 	ld.bu	$r14,$r15,4(0x4)
				for (int k = i; k < (i + npages); k++) {
    1034:	02801610 	addi.w	$r16,$r16,5(0x5)
	page->flags |= flags;
    1038:	038005ce 	ori	$r14,$r14,0x1
    103c:	290011ee 	st.b	$r14,$r15,4(0x4)
				for (int k = i; k < (i + npages); k++) {
    1040:	64001213 	bge	$r16,$r19,16(0x10) # 1050 <page_alloc+0x1c0>
	page->flags |= flags;
    1044:	2a0015ee 	ld.bu	$r14,$r15,5(0x5)
    1048:	038005ce 	ori	$r14,$r14,0x1
    104c:	290015ee 	st.b	$r14,$r15,5(0x5)
					page_k++;
    1050:	001011ad 	add.w	$r13,$r13,$r4
				return (void *)(_alloc_start + i * PAGE_SIZE);
    1054:	1c00002f 	pcaddu12i	$r15,1(0x1)
    1058:	028f81ef 	addi.w	$r15,$r15,992(0x3e0)
    105c:	288001e4 	ld.w	$r4,$r15,0
	page->flags |= flags;
    1060:	038009ce 	ori	$r14,$r14,0x2
				return (void *)(_alloc_start + i * PAGE_SIZE);
    1064:	0040b18c 	slli.w	$r12,$r12,0xc
	page->flags |= flags;
    1068:	293ffdae 	st.b	$r14,$r13,-1(0xfff)
				return (void *)(_alloc_start + i * PAGE_SIZE);
    106c:	00101184 	add.w	$r4,$r12,$r4
    1070:	4c000020 	jirl	$r0,$r1,0
				for (int k = i; k < (i + npages); k++) {
    1074:	00150190 	move	$r16,$r12
    1078:	001501af 	move	$r15,$r13
    107c:	53ff67ff 	b	-156(0xfffff64) # fe0 <page_alloc+0x150>
    1080:	2a3ffdae 	ld.bu	$r14,$r13,-1(0xfff)
    1084:	53ffd3ff 	b	-48(0xfffffd0) # 1054 <page_alloc+0x1c4>
    1088:	03400000 	andi	$r0,$r0,0x0
    108c:	03400000 	andi	$r0,$r0,0x0

00001090 <page_free>:
void page_free(void *p)
{
	/*
	 * Assert (TBD) if p is invalid
	 */
	if (!p || (ptr_t)p >= _alloc_end) {
    1090:	40006880 	beqz	$r4,104(0x68) # 10f8 <page_free+0x68>
    1094:	1c00002c 	pcaddu12i	$r12,1(0x1)
    1098:	028e718c 	addi.w	$r12,$r12,924(0x39c)
    109c:	2880018c 	ld.w	$r12,$r12,0
    10a0:	6c00588c 	bgeu	$r4,$r12,88(0x58) # 10f8 <page_free+0x68>
		return;
	}
	/* get the first page descriptor of this memory block */
	struct Page *page = (struct Page *)HEAP_START;
	page += ((ptr_t)p - _alloc_start)/ PAGE_SIZE;
    10a4:	1c00002d 	pcaddu12i	$r13,1(0x1)
    10a8:	028e41ad 	addi.w	$r13,$r13,912(0x390)
    10ac:	288001ad 	ld.w	$r13,$r13,0
	struct Page *page = (struct Page *)HEAP_START;
    10b0:	1c00002c 	pcaddu12i	$r12,1(0x1)
    10b4:	28be218c 	ld.w	$r12,$r12,-120(0xf88)
    10b8:	2880018c 	ld.w	$r12,$r12,0
	page += ((ptr_t)p - _alloc_start)/ PAGE_SIZE;
    10bc:	00113484 	sub.w	$r4,$r4,$r13
    10c0:	0044b084 	srli.w	$r4,$r4,0xc
    10c4:	00101184 	add.w	$r4,$r12,$r4
	/* loop and clear all the page descriptors of the memory block */
	while (!_is_free(page)) {
    10c8:	2a00008c 	ld.bu	$r12,$r4,0
	if (page->flags & PAGE_TAKEN) {
    10cc:	0340058d 	andi	$r13,$r12,0x1
    10d0:	400029a0 	beqz	$r13,40(0x28) # 10f8 <page_free+0x68>
	if (page->flags & PAGE_LAST) {
    10d4:	0340098c 	andi	$r12,$r12,0x2
	page->flags = 0;
    10d8:	29000080 	st.b	$r0,$r4,0
	if (page->flags & PAGE_LAST) {
    10dc:	40000980 	beqz	$r12,8(0x8) # 10e4 <page_free+0x54>
	page->flags = 0;
    10e0:	4c000020 	jirl	$r0,$r1,0
		if (_is_last(page)) {
			_clear(page);
			break;
		} else {
			_clear(page);
			page++;;
    10e4:	02800484 	addi.w	$r4,$r4,1(0x1)
	while (!_is_free(page)) {
    10e8:	2a00008c 	ld.bu	$r12,$r4,0
	if (page->flags & PAGE_TAKEN) {
    10ec:	0340058d 	andi	$r13,$r12,0x1
	if (page->flags & PAGE_LAST) {
    10f0:	0340098c 	andi	$r12,$r12,0x2
	if (page->flags & PAGE_TAKEN) {
    10f4:	47ffe5bf 	bnez	$r13,-28(0x7fffe4) # 10d8 <page_free+0x48>
		}
	}
}
    10f8:	4c000020 	jirl	$r0,$r1,0
    10fc:	03400000 	andi	$r0,$r0,0x0

00001100 <page_test>:

void page_test()
{
    1100:	02bf8063 	addi.w	$r3,$r3,-32(0xfe0)
    1104:	29804079 	st.w	$r25,$r3,16(0x10)
	for (int i = 0; i <= (_num_pages - npages); i++) {
    1108:	1c000039 	pcaddu12i	$r25,1(0x1)
    110c:	028c9339 	addi.w	$r25,$r25,804(0x324)
{
    1110:	29805078 	st.w	$r24,$r3,20(0x14)
	for (int i = 0; i <= (_num_pages - npages); i++) {
    1114:	2880032e 	ld.w	$r14,$r25,0
	struct Page *page_i = (struct Page *)HEAP_START;
    1118:	1c000038 	pcaddu12i	$r24,1(0x1)
    111c:	28bc8318 	ld.w	$r24,$r24,-224(0xf20)
    1120:	28800310 	ld.w	$r16,$r24,0
{
    1124:	29807061 	st.w	$r1,$r3,28(0x1c)
    1128:	29806077 	st.w	$r23,$r3,24(0x18)
    112c:	2980307a 	st.w	$r26,$r3,12(0xc)
	for (int i = 0; i <= (_num_pages - npages); i++) {
    1130:	00150005 	move	$r5,$r0
    1134:	02bff9ce 	addi.w	$r14,$r14,-2(0xffe)
		page_i++;
    1138:	001040ac 	add.w	$r12,$r5,$r16
		if (_is_free(page_i)) {
    113c:	2a00018d 	ld.bu	$r13,$r12,0
	if (page->flags & PAGE_TAKEN) {
    1140:	034005af 	andi	$r15,$r13,0x1
    1144:	44022de0 	bnez	$r15,556(0x22c) # 1370 <page_test+0x270>
    1148:	2a00058f 	ld.bu	$r15,$r12,1(0x1)
    114c:	034005ef 	andi	$r15,$r15,0x1
    1150:	440221e0 	bnez	$r15,544(0x220) # 1370 <page_test+0x270>
	page->flags |= flags;
    1154:	2a00058e 	ld.bu	$r14,$r12,1(0x1)
				return (void *)(_alloc_start + i * PAGE_SIZE);
    1158:	1c00002f 	pcaddu12i	$r15,1(0x1)
    115c:	028b71ef 	addi.w	$r15,$r15,732(0x2dc)
    1160:	288001ef 	ld.w	$r15,$r15,0
	page->flags |= flags;
    1164:	038005ad 	ori	$r13,$r13,0x1
				return (void *)(_alloc_start + i * PAGE_SIZE);
    1168:	0040b0a5 	slli.w	$r5,$r5,0xc
	page->flags |= flags;
    116c:	2900018d 	st.b	$r13,$r12,0
    1170:	03800dcd 	ori	$r13,$r14,0x3
    1174:	2900058d 	st.b	$r13,$r12,1(0x1)
				return (void *)(_alloc_start + i * PAGE_SIZE);
    1178:	00103ca5 	add.w	$r5,$r5,$r15
	void *p = page_alloc(2);
	printf("p = %p\n", p);
    117c:	1c000004 	pcaddu12i	$r4,0
    1180:	0292e084 	addi.w	$r4,$r4,1208(0x4b8)
    1184:	57f49fff 	bl	-2916(0xffff49c) # 620 <printf>
	for (int i = 0; i <= (_num_pages - npages); i++) {
    1188:	28800332 	ld.w	$r18,$r25,0
	struct Page *page_i = (struct Page *)HEAP_START;
    118c:	28800314 	ld.w	$r20,$r24,0
	for (int i = 0; i <= (_num_pages - npages); i++) {
    1190:	00150005 	move	$r5,$r0
    1194:	02bfe652 	addi.w	$r18,$r18,-7(0xff9)
		page_i++;
    1198:	001050ac 	add.w	$r12,$r5,$r20
		if (_is_free(page_i)) {
    119c:	2a000190 	ld.bu	$r16,$r12,0
	if (page->flags & PAGE_TAKEN) {
    11a0:	0340060d 	andi	$r13,$r16,0x1
    11a4:	4401ada0 	bnez	$r13,428(0x1ac) # 1350 <page_test+0x250>
    11a8:	2a00058f 	ld.bu	$r15,$r12,1(0x1)
    11ac:	034005ed 	andi	$r13,$r15,0x1
    11b0:	4401a1a0 	bnez	$r13,416(0x1a0) # 1350 <page_test+0x250>
    11b4:	2a00098e 	ld.bu	$r14,$r12,2(0x2)
    11b8:	034005cd 	andi	$r13,$r14,0x1
    11bc:	440195a0 	bnez	$r13,404(0x194) # 1350 <page_test+0x250>
    11c0:	2a000d8d 	ld.bu	$r13,$r12,3(0x3)
    11c4:	034005b1 	andi	$r17,$r13,0x1
    11c8:	44018a20 	bnez	$r17,392(0x188) # 1350 <page_test+0x250>
    11cc:	2a001191 	ld.bu	$r17,$r12,4(0x4)
    11d0:	03400633 	andi	$r19,$r17,0x1
    11d4:	44017e60 	bnez	$r19,380(0x17c) # 1350 <page_test+0x250>
    11d8:	2a001593 	ld.bu	$r19,$r12,5(0x5)
    11dc:	03400664 	andi	$r4,$r19,0x1
    11e0:	44017080 	bnez	$r4,368(0x170) # 1350 <page_test+0x250>
    11e4:	2a001984 	ld.bu	$r4,$r12,6(0x6)
    11e8:	03400484 	andi	$r4,$r4,0x1
    11ec:	44016480 	bnez	$r4,356(0x164) # 1350 <page_test+0x250>
				return (void *)(_alloc_start + i * PAGE_SIZE);
    11f0:	1c00003a 	pcaddu12i	$r26,1(0x1)
    11f4:	0289135a 	addi.w	$r26,$r26,580(0x244)
	page->flags |= flags;
    11f8:	2a001992 	ld.bu	$r18,$r12,6(0x6)
				return (void *)(_alloc_start + i * PAGE_SIZE);
    11fc:	28800357 	ld.w	$r23,$r26,0
    1200:	0040b0a5 	slli.w	$r5,$r5,0xc
	page->flags |= flags;
    1204:	038005ef 	ori	$r15,$r15,0x1
				return (void *)(_alloc_start + i * PAGE_SIZE);
    1208:	00105cb7 	add.w	$r23,$r5,$r23
	page->flags |= flags;
    120c:	03800610 	ori	$r16,$r16,0x1
    1210:	038005ce 	ori	$r14,$r14,0x1
    1214:	038005ad 	ori	$r13,$r13,0x1
    1218:	03800631 	ori	$r17,$r17,0x1
    121c:	03800673 	ori	$r19,$r19,0x1
    1220:	2900058f 	st.b	$r15,$r12,1(0x1)
    1224:	03800e4f 	ori	$r15,$r18,0x3
    1228:	29000190 	st.b	$r16,$r12,0
    122c:	2900098e 	st.b	$r14,$r12,2(0x2)
    1230:	29000d8d 	st.b	$r13,$r12,3(0x3)
    1234:	29001191 	st.b	$r17,$r12,4(0x4)
    1238:	29001593 	st.b	$r19,$r12,5(0x5)
    123c:	2900198f 	st.b	$r15,$r12,6(0x6)
	//page_free(p);

	void *p2 = page_alloc(7);
	printf("p2 = %p\n", p2);
    1240:	1c000004 	pcaddu12i	$r4,0
    1244:	028ff084 	addi.w	$r4,$r4,1020(0x3fc)
    1248:	001502e5 	move	$r5,$r23
    124c:	57f3d7ff 	bl	-3116(0xffff3d4) # 620 <printf>
	if (!p || (ptr_t)p >= _alloc_end) {
    1250:	400192e0 	beqz	$r23,400(0x190) # 13e0 <page_test+0x2e0>
    1254:	1c00002d 	pcaddu12i	$r13,1(0x1)
    1258:	028771ad 	addi.w	$r13,$r13,476(0x1dc)
    125c:	288001ad 	ld.w	$r13,$r13,0
    1260:	2880030c 	ld.w	$r12,$r24,0
    1264:	6c004eed 	bgeu	$r23,$r13,76(0x4c) # 12b0 <page_test+0x1b0>
	page += ((ptr_t)p - _alloc_start)/ PAGE_SIZE;
    1268:	28800345 	ld.w	$r5,$r26,0
    126c:	001116f7 	sub.w	$r23,$r23,$r5
    1270:	0044b2f7 	srli.w	$r23,$r23,0xc
    1274:	00105d97 	add.w	$r23,$r12,$r23
	while (!_is_free(page)) {
    1278:	2a0002ed 	ld.bu	$r13,$r23,0
	if (page->flags & PAGE_TAKEN) {
    127c:	034005ae 	andi	$r14,$r13,0x1
    1280:	400031c0 	beqz	$r14,48(0x30) # 12b0 <page_test+0x1b0>
	if (page->flags & PAGE_LAST) {
    1284:	034009ad 	andi	$r13,$r13,0x2
    1288:	440021a0 	bnez	$r13,32(0x20) # 12a8 <page_test+0x1a8>
	page->flags = 0;
    128c:	290002e0 	st.b	$r0,$r23,0
			page++;;
    1290:	028006f7 	addi.w	$r23,$r23,1(0x1)
	while (!_is_free(page)) {
    1294:	2a0002ec 	ld.bu	$r12,$r23,0
	if (page->flags & PAGE_TAKEN) {
    1298:	0340058d 	andi	$r13,$r12,0x1
	if (page->flags & PAGE_LAST) {
    129c:	0340098c 	andi	$r12,$r12,0x2
	if (page->flags & PAGE_TAKEN) {
    12a0:	400141a0 	beqz	$r13,320(0x140) # 13e0 <page_test+0x2e0>
	if (page->flags & PAGE_LAST) {
    12a4:	43ffe99f 	beqz	$r12,-24(0x7fffe8) # 128c <page_test+0x18c>
	page->flags = 0;
    12a8:	290002e0 	st.b	$r0,$r23,0
    12ac:	2880030c 	ld.w	$r12,$r24,0
	for (int i = 0; i <= (_num_pages - npages); i++) {
    12b0:	2880032e 	ld.w	$r14,$r25,0
    12b4:	00150005 	move	$r5,$r0
    12b8:	02bff1ce 	addi.w	$r14,$r14,-4(0xffc)
    12bc:	03400000 	andi	$r0,$r0,0x0
	if (page->flags & PAGE_TAKEN) {
    12c0:	2a000191 	ld.bu	$r17,$r12,0
    12c4:	0340062d 	andi	$r13,$r17,0x1
    12c8:	4400b9a0 	bnez	$r13,184(0xb8) # 1380 <page_test+0x280>
    12cc:	2a000590 	ld.bu	$r16,$r12,1(0x1)
    12d0:	0340060d 	andi	$r13,$r16,0x1
    12d4:	4400ada0 	bnez	$r13,172(0xac) # 1380 <page_test+0x280>
    12d8:	2a00098f 	ld.bu	$r15,$r12,2(0x2)
    12dc:	034005ed 	andi	$r13,$r15,0x1
    12e0:	4400a1a0 	bnez	$r13,160(0xa0) # 1380 <page_test+0x280>
    12e4:	2a000d8d 	ld.bu	$r13,$r12,3(0x3)
    12e8:	034005b2 	andi	$r18,$r13,0x1
    12ec:	44009640 	bnez	$r18,148(0x94) # 1380 <page_test+0x280>
    12f0:	03400d8e 	andi	$r14,$r12,0x3
    12f4:	4400c1c0 	bnez	$r14,192(0xc0) # 13b4 <page_test+0x2b4>
	page->flags |= flags;
    12f8:	2880018d 	ld.w	$r13,$r12,0
    12fc:	1402020e 	lu12i.w	$r14,4112(0x1010)
    1300:	038405ce 	ori	$r14,$r14,0x101
    1304:	001539ad 	or	$r13,$r13,$r14
    1308:	2980018d 	st.w	$r13,$r12,0
					page_k++;
    130c:	0044e1ad 	srli.w	$r13,$r13,0x18
				return (void *)(_alloc_start + i * PAGE_SIZE);
    1310:	1c00002e 	pcaddu12i	$r14,1(0x1)
    1314:	028491ce 	addi.w	$r14,$r14,292(0x124)
	page->flags |= flags;
    1318:	038009ad 	ori	$r13,$r13,0x2
    131c:	29000d8d 	st.b	$r13,$r12,3(0x3)
				return (void *)(_alloc_start + i * PAGE_SIZE);
    1320:	288001ce 	ld.w	$r14,$r14,0
	page_free(p2);

	void *p3 = page_alloc(4);
	printf("p3 = %p\n", p3);
}
    1324:	28807061 	ld.w	$r1,$r3,28(0x1c)
    1328:	28806077 	ld.w	$r23,$r3,24(0x18)
    132c:	28805078 	ld.w	$r24,$r3,20(0x14)
    1330:	28804079 	ld.w	$r25,$r3,16(0x10)
    1334:	2880307a 	ld.w	$r26,$r3,12(0xc)
				return (void *)(_alloc_start + i * PAGE_SIZE);
    1338:	0040b0a5 	slli.w	$r5,$r5,0xc
    133c:	001038a5 	add.w	$r5,$r5,$r14
	printf("p3 = %p\n", p3);
    1340:	1c000004 	pcaddu12i	$r4,0
    1344:	028c2084 	addi.w	$r4,$r4,776(0x308)
}
    1348:	02808063 	addi.w	$r3,$r3,32(0x20)
	printf("p3 = %p\n", p3);
    134c:	53f2d7ff 	b	-3372(0xffff2d4) # 620 <printf>
	for (int i = 0; i <= (_num_pages - npages); i++) {
    1350:	028004a5 	addi.w	$r5,$r5,1(0x1)
    1354:	6ffe4645 	bgeu	$r18,$r5,-444(0x3fe44) # 1198 <page_test+0x98>
	printf("p2 = %p\n", p2);
    1358:	00150005 	move	$r5,$r0
    135c:	1c000004 	pcaddu12i	$r4,0
    1360:	028b8084 	addi.w	$r4,$r4,736(0x2e0)
    1364:	57f2bfff 	bl	-3396(0xffff2bc) # 620 <printf>
	if (!p || (ptr_t)p >= _alloc_end) {
    1368:	2880030c 	ld.w	$r12,$r24,0
    136c:	53ff47ff 	b	-188(0xfffff44) # 12b0 <page_test+0x1b0>
	for (int i = 0; i <= (_num_pages - npages); i++) {
    1370:	028004a5 	addi.w	$r5,$r5,1(0x1)
    1374:	6ffdc5c5 	bgeu	$r14,$r5,-572(0x3fdc4) # 1138 <page_test+0x38>
	return NULL;
    1378:	00150005 	move	$r5,$r0
    137c:	53fe03ff 	b	-512(0xffffe00) # 117c <page_test+0x7c>
	for (int i = 0; i <= (_num_pages - npages); i++) {
    1380:	028004a5 	addi.w	$r5,$r5,1(0x1)
		page_i++;
    1384:	0280058c 	addi.w	$r12,$r12,1(0x1)
	for (int i = 0; i <= (_num_pages - npages); i++) {
    1388:	6fff39c5 	bgeu	$r14,$r5,-200(0x3ff38) # 12c0 <page_test+0x1c0>
}
    138c:	28807061 	ld.w	$r1,$r3,28(0x1c)
    1390:	28806077 	ld.w	$r23,$r3,24(0x18)
    1394:	28805078 	ld.w	$r24,$r3,20(0x14)
    1398:	28804079 	ld.w	$r25,$r3,16(0x10)
    139c:	2880307a 	ld.w	$r26,$r3,12(0xc)
	return NULL;
    13a0:	00150005 	move	$r5,$r0
	printf("p3 = %p\n", p3);
    13a4:	1c000004 	pcaddu12i	$r4,0
    13a8:	028a9084 	addi.w	$r4,$r4,676(0x2a4)
}
    13ac:	02808063 	addi.w	$r3,$r3,32(0x20)
	printf("p3 = %p\n", p3);
    13b0:	53f273ff 	b	-3472(0xffff270) # 620 <printf>
	page->flags |= flags;
    13b4:	038005ad 	ori	$r13,$r13,0x1
    13b8:	03800631 	ori	$r17,$r17,0x1
    13bc:	03800610 	ori	$r16,$r16,0x1
    13c0:	038005ef 	ori	$r15,$r15,0x1
    13c4:	006781ad 	bstrpick.w	$r13,$r13,0x7,0x0
    13c8:	29000191 	st.b	$r17,$r12,0
    13cc:	29000590 	st.b	$r16,$r12,1(0x1)
    13d0:	2900098f 	st.b	$r15,$r12,2(0x2)
    13d4:	29000d8d 	st.b	$r13,$r12,3(0x3)
					page_k++;
    13d8:	53ff3bff 	b	-200(0xfffff38) # 1310 <page_test+0x210>
    13dc:	03400000 	andi	$r0,$r0,0x0
    13e0:	2880030c 	ld.w	$r12,$r24,0
    13e4:	53fecfff 	b	-308(0xffffecc) # 12b0 <page_test+0x1b0>
    13e8:	03400000 	andi	$r0,$r0,0x0
    13ec:	03400000 	andi	$r0,$r0,0x0

000013f0 <user_task0>:
	while (count--);
}


void user_task0(void)
{
    13f0:	02bfc063 	addi.w	$r3,$r3,-16(0xff0)
    13f4:	29802077 	st.w	$r23,$r3,8(0x8)
	uart_puts("Task 0: Created!\n");
    13f8:	1c000004 	pcaddu12i	$r4,0
    13fc:	02897084 	addi.w	$r4,$r4,604(0x25c)
	count *= 50000;
    1400:	14000197 	lu12i.w	$r23,12(0xc)
{
    1404:	29801078 	st.w	$r24,$r3,4(0x4)
    1408:	29803061 	st.w	$r1,$r3,12(0xc)
	while (1) {
		uart_puts("Task 0: Running...\n");
    140c:	1c000018 	pcaddu12i	$r24,0
    1410:	02897318 	addi.w	$r24,$r24,604(0x25c)
	uart_puts("Task 0: Created!\n");
    1414:	57f1cfff 	bl	-3636(0xffff1cc) # 5e0 <uart_puts>
	count *= 50000;
    1418:	038d42f7 	ori	$r23,$r23,0x350
    141c:	03400000 	andi	$r0,$r0,0x0
		uart_puts("Task 0: Running...\n");
    1420:	00150304 	move	$r4,$r24
    1424:	57f1bfff 	bl	-3652(0xffff1bc) # 5e0 <uart_puts>
		task_delay(1000);
    1428:	028fa00c 	addi.w	$r12,$r0,1000(0x3e8)
	count *= 50000;
    142c:	001c5d8c 	mul.w	$r12,$r12,$r23
	while (count--);
    1430:	0015018d 	move	$r13,$r12
    1434:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
    1438:	47fff9bf 	bnez	$r13,-8(0x7ffff8) # 1430 <user_task0+0x40>
    143c:	53ffe7ff 	b	-28(0xfffffe4) # 1420 <user_task0+0x30>

00001440 <sched_init>:
	asm volatile("csrwr  %0, 0x30" : : "r" (x));
    1440:	0015000c 	move	$r12,$r0
    1444:	0400c02c 	csrwr	$r12,0x30
	ctx_task.sp = (reg_t) &task_stack[STACK_SIZE];
    1448:	1c00002c 	pcaddu12i	$r12,1(0x1)
    144c:	0281e18c 	addi.w	$r12,$r12,120(0x78)
    1450:	1c00002d 	pcaddu12i	$r13,1(0x1)
    1454:	02bfc1ad 	addi.w	$r13,$r13,-16(0xff0)
	ctx_task.ra = (reg_t) user_task0;
    1458:	1c00000e 	pcaddu12i	$r14,0
    145c:	02be61ce 	addi.w	$r14,$r14,-104(0xf98)
	ctx_task.sp = (reg_t) &task_stack[STACK_SIZE];
    1460:	0290018c 	addi.w	$r12,$r12,1024(0x400)
	ctx_task.ra = (reg_t) user_task0;
    1464:	298001ae 	st.w	$r14,$r13,0
	ctx_task.sp = (reg_t) &task_stack[STACK_SIZE];
    1468:	298021ac 	st.w	$r12,$r13,8(0x8)
}
    146c:	4c000020 	jirl	$r0,$r1,0

00001470 <schedule>:
	switch_to(next);
    1470:	1c000024 	pcaddu12i	$r4,1(0x1)
    1474:	02bf4084 	addi.w	$r4,$r4,-48(0xfd0)
    1478:	53efabff 	b	-4184(0xfffefa8) # 420 <switch_to>
    147c:	03400000 	andi	$r0,$r0,0x0

00001480 <task_delay>:
{
    1480:	02bfc063 	addi.w	$r3,$r3,-16(0xff0)
    1484:	29803064 	st.w	$r4,$r3,12(0xc)
	count *= 50000;
    1488:	2880306c 	ld.w	$r12,$r3,12(0xc)
    148c:	1400018d 	lu12i.w	$r13,12(0xc)
    1490:	038d41ad 	ori	$r13,$r13,0x350
    1494:	001c358c 	mul.w	$r12,$r12,$r13
    1498:	2980306c 	st.w	$r12,$r3,12(0xc)
	while (count--);
    149c:	03400000 	andi	$r0,$r0,0x0
    14a0:	2880306c 	ld.w	$r12,$r3,12(0xc)
    14a4:	02bffd8d 	addi.w	$r13,$r12,-1(0xfff)
    14a8:	2980306d 	st.w	$r13,$r3,12(0xc)
    14ac:	47fff59f 	bnez	$r12,-12(0x7ffff4) # 14a0 <task_delay+0x20>
}
    14b0:	02804063 	addi.w	$r3,$r3,16(0x10)
    14b4:	4c000020 	jirl	$r0,$r1,0
    14b8:	03400000 	andi	$r0,$r0,0x0
    14bc:	03400000 	andi	$r0,$r0,0x0
