
out/os.elf:     file format elf32-loongarch


Disassembly of section .text:

80000000 <_start>:
	.global	_start

	.text
_start:

	la.local $t0, stacks
80000000:	1c00000c 	pcaddu12i	$r12,0
80000004:	0280718c 	addi.w	$r12,$r12,28(0x1c)
	la.local $t1, STACK_SIZE
80000008:	1c00002d 	pcaddu12i	$r13,1(0x1)
8000000c:	02bfe1ad 	addi.w	$r13,$r13,-8(0xff8)
	ld.w     $t1, $t1, 0
80000010:	288001ad 	ld.w	$r13,$r13,0
	add.w   $sp, $t0, $t1
80000014:	00103583 	add.w	$r3,$r12,$r13
					# set the initial stack pointer
					# to the end of the first stack space
	
	# la.local $t0, start_kernel
	# jr $t0
	b start_kernel
80000018:	50040800 	b	1032(0x408) # 80000420 <start_kernel>

8000001c <stacks>:
	...
8000041c:	03400000 	andi	$r0,$r0,0x0

80000420 <start_kernel>:
#include "os.h"

int i = 0;
void start_kernel(void)
{	
80000420:	02bfc063 	addi.w	$r3,$r3,-16(0xff0)
	// while( i < 10){
	// 	printf("%d", i);
	// 	i++;
	// }
	int ch = 1;
	uart_puts("777\n");
80000424:	1c000004 	pcaddu12i	$r4,0
80000428:	029c7084 	addi.w	$r4,$r4,1820(0x71c)
{	
8000042c:	29803061 	st.w	$r1,$r3,12(0xc)
	uart_puts("777\n");
80000430:	54009000 	bl	144(0x90) # 800004c0 <uart_puts>
	printf("bbbb%cbbbbb\n", 'a');
80000434:	02818405 	addi.w	$r5,$r0,97(0x61)
80000438:	1c000004 	pcaddu12i	$r4,0
8000043c:	029c4084 	addi.w	$r4,$r4,1808(0x710)
80000440:	5400c000 	bl	192(0xc0) # 80000500 <printf>
	switch (ch) {
	case 1:
		uart_puts("1\n");
80000444:	1c000004 	pcaddu12i	$r4,0
80000448:	029c5084 	addi.w	$r4,$r4,1812(0x714)
8000044c:	54007400 	bl	116(0x74) # 800004c0 <uart_puts>
		break;
	}

	while (1) {
		// uart_puts("666");
	}; // stop here!
80000450:	50000000 	b	0 # 80000450 <start_kernel+0x30>
80000454:	03400000 	andi	$r0,$r0,0x0
80000458:	03400000 	andi	$r0,$r0,0x0
8000045c:	03400000 	andi	$r0,$r0,0x0

80000460 <uart_init>:
    return *(volatile char*)addr;
}

static void io_writeb(unsigned long addr, char c)
{
    *(char*)addr = c;
80000460:	143fc00c 	lu12i.w	$r12,130560(0x1fe00)
    return *(volatile char*)addr;
80000464:	03878d8d 	ori	$r13,$r12,0x1e3
    *(char*)addr = c;
80000468:	0387858f 	ori	$r15,$r12,0x1e1
    return *(volatile char*)addr;
8000046c:	2a0001b0 	ld.bu	$r16,$r13,0
    *(char*)addr = c;
80000470:	02800c0e 	addi.w	$r14,$r0,3(0x3)
80000474:	290001e0 	st.b	$r0,$r15,0
80000478:	0387818c 	ori	$r12,$r12,0x1e0
8000047c:	2900018e 	st.b	$r14,$r12,0
80000480:	290001ae 	st.b	$r14,$r13,0
	 * - no break control
	 * - disabled baud latch
	 */
	lcr = 0;
	uart_write_reg(LCR, lcr | (3 << 0));
}
80000484:	4c000020 	jirl	$r0,$r1,0
80000488:	03400000 	andi	$r0,$r0,0x0
8000048c:	03400000 	andi	$r0,$r0,0x0

80000490 <uart_putc>:
    return *(volatile char*)addr;
80000490:	143fc00e 	lu12i.w	$r14,130560(0x1fe00)

int uart_putc(char ch)
{
80000494:	0015008f 	move	$r15,$r4
    return *(volatile char*)addr;
80000498:	038795cd 	ori	$r13,$r14,0x1e5
8000049c:	03400000 	andi	$r0,$r0,0x0
800004a0:	2a0001ac 	ld.bu	$r12,$r13,0
	while ((uart_read_reg(LSR) & LSR_TX_IDLE) == 0);
800004a4:	0340818c 	andi	$r12,$r12,0x20
800004a8:	43fff99f 	beqz	$r12,-8(0x7ffff8) # 800004a0 <uart_putc+0x10>
    *(char*)addr = c;
800004ac:	038781ce 	ori	$r14,$r14,0x1e0
	uart_write_reg(THR, ch);

	return (int)ch;
}
800004b0:	001501e4 	move	$r4,$r15
    *(char*)addr = c;
800004b4:	290001cf 	st.b	$r15,$r14,0
}
800004b8:	4c000020 	jirl	$r0,$r1,0
800004bc:	03400000 	andi	$r0,$r0,0x0

800004c0 <uart_puts>:

void uart_puts(char *s)
{
	while (*s) {
800004c0:	2800008e 	ld.b	$r14,$r4,0
800004c4:	40002dc0 	beqz	$r14,44(0x2c) # 800004f0 <uart_puts+0x30>
    return *(volatile char*)addr;
800004c8:	143fc00f 	lu12i.w	$r15,130560(0x1fe00)
800004cc:	038795ed 	ori	$r13,$r15,0x1e5
    *(char*)addr = c;
800004d0:	038781ef 	ori	$r15,$r15,0x1e0
		uart_putc(*s++);
800004d4:	02800484 	addi.w	$r4,$r4,1(0x1)
    return *(volatile char*)addr;
800004d8:	2a0001ac 	ld.bu	$r12,$r13,0
	while ((uart_read_reg(LSR) & LSR_TX_IDLE) == 0);
800004dc:	0340818c 	andi	$r12,$r12,0x20
800004e0:	43fff99f 	beqz	$r12,-8(0x7ffff8) # 800004d8 <uart_puts+0x18>
    *(char*)addr = c;
800004e4:	290001ee 	st.b	$r14,$r15,0
	while (*s) {
800004e8:	2800008e 	ld.b	$r14,$r4,0
800004ec:	47ffe9df 	bnez	$r14,-24(0x7fffe8) # 800004d4 <uart_puts+0x14>
	}
}
800004f0:	4c000020 	jirl	$r0,$r1,0
800004f4:	03400000 	andi	$r0,$r0,0x0
800004f8:	03400000 	andi	$r0,$r0,0x0
800004fc:	03400000 	andi	$r0,$r0,0x0

80000500 <printf>:
	uart_puts(out_buf);
	return res;
}

int printf(const char* s, ...)
{
80000500:	02bec063 	addi.w	$r3,$r3,-80(0xfb0)
80000504:	2980b061 	st.w	$r1,$r3,44(0x2c)
80000508:	2980a077 	st.w	$r23,$r3,40(0x28)
8000050c:	29809078 	st.w	$r24,$r3,36(0x24)
80000510:	29808079 	st.w	$r25,$r3,32(0x20)
80000514:	2980707a 	st.w	$r26,$r3,28(0x1c)
80000518:	2980607b 	st.w	$r27,$r3,24(0x18)
8000051c:	2980507c 	st.w	$r28,$r3,20(0x14)
80000520:	2980d065 	st.w	$r5,$r3,52(0x34)
80000524:	2980e066 	st.w	$r6,$r3,56(0x38)
	for (; *s; s++) {
80000528:	2800008d 	ld.b	$r13,$r4,0
	int res = 0;
	va_list vl;
	va_start(vl, s);
8000052c:	0280d071 	addi.w	$r17,$r3,52(0x34)
{
80000530:	2980f067 	st.w	$r7,$r3,60(0x3c)
80000534:	29810068 	st.w	$r8,$r3,64(0x40)
80000538:	29811069 	st.w	$r9,$r3,68(0x44)
8000053c:	2981206a 	st.w	$r10,$r3,72(0x48)
80000540:	2981306b 	st.w	$r11,$r3,76(0x4c)
	va_start(vl, s);
80000544:	29803071 	st.w	$r17,$r3,12(0xc)
	for (; *s; s++) {
80000548:	400569a0 	beqz	$r13,1384(0x568) # 80000ab0 <printf+0x5b0>
8000054c:	00150230 	move	$r16,$r17
80000550:	00150092 	move	$r18,$r4
80000554:	001501ac 	move	$r12,$r13
	size_t pos = 0;
80000558:	0015000e 	move	$r14,$r0
	int format = 0;
8000055c:	0015000f 	move	$r15,$r0
		} else if (*s == '%') {
80000560:	0280940a 	addi.w	$r10,$r0,37(0x25)
			if(tmp == 'l') {
80000564:	0281b009 	addi.w	$r9,$r0,108(0x6c)
			else if(tmp == 'p' || tmp == 'x'){
80000568:	0281c008 	addi.w	$r8,$r0,112(0x70)
8000056c:	0281e007 	addi.w	$r7,$r0,120(0x78)
			else if(tmp == 'd' ){
80000570:	02819006 	addi.w	$r6,$r0,100(0x64)
			else if(tmp == 's'){
80000574:	0281cc05 	addi.w	$r5,$r0,115(0x73)
			else if(tmp == 'c'){
80000578:	02818c14 	addi.w	$r20,$r0,99(0x63)
				for (long nn = num; nn /= 10; digits++);
8000057c:	02802813 	addi.w	$r19,$r0,10(0xa)
		if (format) {
80000580:	400051e0 	beqz	$r15,80(0x50) # 800005d0 <printf+0xd0>
			if(tmp == 'l') {
80000584:	58002189 	beq	$r12,$r9,32(0x20) # 800005a4 <printf+0xa4>
			else if(tmp == 'p' || tmp == 'x'){
80000588:	5801d188 	beq	$r12,$r8,464(0x1d0) # 80000758 <printf+0x258>
8000058c:	58007587 	beq	$r12,$r7,116(0x74) # 80000600 <printf+0x100>
			else if(tmp == 'd' ){
80000590:	58017186 	beq	$r12,$r6,368(0x170) # 80000700 <printf+0x200>
			else if(tmp == 's'){
80000594:	58038d85 	beq	$r12,$r5,908(0x38c) # 80000920 <printf+0x420>
			else if(tmp == 'c'){
80000598:	5c000d94 	bne	$r12,$r20,12(0xc) # 800005a4 <printf+0xa4>
				pos++;
8000059c:	028005ce 	addi.w	$r14,$r14,1(0x1)
				format = 0;
800005a0:	0015000f 	move	$r15,$r0
	for (; *s; s++) {
800005a4:	02800652 	addi.w	$r18,$r18,1(0x1)
800005a8:	2800024c 	ld.b	$r12,$r18,0
800005ac:	47ffd59f 	bnez	$r12,-44(0x7fffd4) # 80000580 <printf+0x80>
	if (res+1 >= sizeof(out_buf)) {
800005b0:	028005d0 	addi.w	$r16,$r14,1(0x1)
800005b4:	028f9c0c 	addi.w	$r12,$r0,999(0x3e7)
	return pos;
800005b8:	001501d7 	move	$r23,$r14
	if (res+1 >= sizeof(out_buf)) {
800005bc:	6c006590 	bgeu	$r12,$r16,100(0x64) # 80000620 <printf+0x120>
		uart_puts("error: output string size overflow\n");
800005c0:	1c000004 	pcaddu12i	$r4,0
800005c4:	02967084 	addi.w	$r4,$r4,1436(0x59c)
800005c8:	57fefbff 	bl	-264(0xffffef8) # 800004c0 <uart_puts>
		while(1) {}
800005cc:	50000000 	b	0 # 800005cc <printf+0xcc>
		} else if (*s == '%') {
800005d0:	5800198a 	beq	$r12,$r10,24(0x18) # 800005e8 <printf+0xe8>
	for (; *s; s++) {
800005d4:	02800652 	addi.w	$r18,$r18,1(0x1)
800005d8:	2800024c 	ld.b	$r12,$r18,0
			pos++;
800005dc:	028005ce 	addi.w	$r14,$r14,1(0x1)
	for (; *s; s++) {
800005e0:	47ffa19f 	bnez	$r12,-96(0x7fffa0) # 80000580 <printf+0x80>
800005e4:	53ffcfff 	b	-52(0xfffffcc) # 800005b0 <printf+0xb0>
800005e8:	02800652 	addi.w	$r18,$r18,1(0x1)
800005ec:	2800024c 	ld.b	$r12,$r18,0
			format = 1;
800005f0:	0280040f 	addi.w	$r15,$r0,1(0x1)
	for (; *s; s++) {
800005f4:	47ff8d9f 	bnez	$r12,-116(0x7fff8c) # 80000580 <printf+0x80>
800005f8:	53ffbbff 	b	-72(0xfffffb8) # 800005b0 <printf+0xb0>
800005fc:	03400000 	andi	$r0,$r0,0x0
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
80000600:	02801210 	addi.w	$r16,$r16,4(0x4)
					pos++;
80000604:	028021ce 	addi.w	$r14,$r14,8(0x8)
				format = 0;
80000608:	0015000f 	move	$r15,$r0
	for (; *s; s++) {
8000060c:	02800652 	addi.w	$r18,$r18,1(0x1)
80000610:	2800024c 	ld.b	$r12,$r18,0
80000614:	47ff6d9f 	bnez	$r12,-148(0x7fff6c) # 80000580 <printf+0x80>
80000618:	53ff9bff 	b	-104(0xfffff98) # 800005b0 <printf+0xb0>
8000061c:	03400000 	andi	$r0,$r0,0x0
	size_t pos = 0;
80000620:	0015000c 	move	$r12,$r0
	int format = 0;
80000624:	0015000f 	move	$r15,$r0
		} else if (*s == '%') {
80000628:	02809408 	addi.w	$r8,$r0,37(0x25)
				out[pos] = *s;
8000062c:	1c000032 	pcaddu12i	$r18,1(0x1)
80000630:	02a7a252 	addi.w	$r18,$r18,-1560(0x9e8)
			if(tmp == 'l') {
80000634:	0281b007 	addi.w	$r7,$r0,108(0x6c)
			else if(tmp == 'p' || tmp == 'x'){
80000638:	0281c006 	addi.w	$r6,$r0,112(0x70)
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
8000063c:	02802414 	addi.w	$r20,$r0,9(0x9)
						out[pos] = 'x';
80000640:	0281e018 	addi.w	$r24,$r0,120(0x78)
						out[pos] = '0';
80000644:	0280c001 	addi.w	$r1,$r0,48(0x30)
			else if(tmp == 'p' || tmp == 'x'){
80000648:	0281e005 	addi.w	$r5,$r0,120(0x78)
			else if(tmp == 'd' ){
8000064c:	02819009 	addi.w	$r9,$r0,100(0x64)
			else if(tmp == 's'){
80000650:	0281cc0a 	addi.w	$r10,$r0,115(0x73)
			else if(tmp == 'c'){
80000654:	02818c0b 	addi.w	$r11,$r0,99(0x63)
				for (long nn = num; nn /= 10; digits++);
80000658:	02802813 	addi.w	$r19,$r0,10(0xa)
						out[pos] = '-';
8000065c:	0280b419 	addi.w	$r25,$r0,45(0x2d)
80000660:	50002c00 	b	44(0x2c) # 8000068c <printf+0x18c>
			if(tmp == 'l') {
80000664:	58001da7 	beq	$r13,$r7,28(0x1c) # 80000680 <printf+0x180>
			else if(tmp == 'p' || tmp == 'x'){
80000668:	5803c1a6 	beq	$r13,$r6,960(0x3c0) # 80000a28 <printf+0x528>
8000066c:	580105a5 	beq	$r13,$r5,260(0x104) # 80000770 <printf+0x270>
			else if(tmp == 'd' ){
80000670:	580331a9 	beq	$r13,$r9,816(0x330) # 800009a0 <printf+0x4a0>
			else if(tmp == 's'){
80000674:	5803e1aa 	beq	$r13,$r10,992(0x3e0) # 80000a54 <printf+0x554>
			else if(tmp == 'c'){
80000678:	5802f9ab 	beq	$r13,$r11,760(0x2f8) # 80000970 <printf+0x470>
8000067c:	03400000 	andi	$r0,$r0,0x0
	for (; *s; s++) {
80000680:	02800484 	addi.w	$r4,$r4,1(0x1)
80000684:	2800008d 	ld.b	$r13,$r4,0
80000688:	400029a0 	beqz	$r13,40(0x28) # 800006b0 <printf+0x1b0>
		if (format) {
8000068c:	47ffd9ff 	bnez	$r15,-40(0x7fffd8) # 80000664 <printf+0x164>
		} else if (*s == '%') {
80000690:	580069a8 	beq	$r13,$r8,104(0x68) # 800006f8 <printf+0x1f8>
			if (out && pos < n) {
80000694:	6c000d90 	bgeu	$r12,$r16,12(0xc) # 800006a0 <printf+0x1a0>
				out[pos] = *s;
80000698:	0010325a 	add.w	$r26,$r18,$r12
8000069c:	2900034d 	st.b	$r13,$r26,0
	for (; *s; s++) {
800006a0:	02800484 	addi.w	$r4,$r4,1(0x1)
800006a4:	2800008d 	ld.b	$r13,$r4,0
			pos++;
800006a8:	0280058c 	addi.w	$r12,$r12,1(0x1)
	for (; *s; s++) {
800006ac:	47ffe1bf 	bnez	$r13,-32(0x7fffe0) # 8000068c <printf+0x18c>
	if (out && pos < n) {
800006b0:	6c02a990 	bgeu	$r12,$r16,680(0x2a8) # 80000958 <printf+0x458>
		out[pos] = 0;
800006b4:	1c00002d 	pcaddu12i	$r13,1(0x1)
800006b8:	02a581ad 	addi.w	$r13,$r13,-1696(0x960)
800006bc:	001031ac 	add.w	$r12,$r13,$r12
800006c0:	29000180 	st.b	$r0,$r12,0
	uart_puts(out_buf);
800006c4:	1c000024 	pcaddu12i	$r4,1(0x1)
800006c8:	02a54084 	addi.w	$r4,$r4,-1712(0x950)
800006cc:	57fdf7ff 	bl	-524(0xffffdf4) # 800004c0 <uart_puts>
	res = _vprintf(s, vl);
	va_end(vl);
	return res;
}
800006d0:	2880b061 	ld.w	$r1,$r3,44(0x2c)
800006d4:	001502e4 	move	$r4,$r23
800006d8:	2880a077 	ld.w	$r23,$r3,40(0x28)
800006dc:	28809078 	ld.w	$r24,$r3,36(0x24)
800006e0:	28808079 	ld.w	$r25,$r3,32(0x20)
800006e4:	2880707a 	ld.w	$r26,$r3,28(0x1c)
800006e8:	2880607b 	ld.w	$r27,$r3,24(0x18)
800006ec:	2880507c 	ld.w	$r28,$r3,20(0x14)
800006f0:	02814063 	addi.w	$r3,$r3,80(0x50)
800006f4:	4c000020 	jirl	$r0,$r1,0
			format = 1;
800006f8:	0280040f 	addi.w	$r15,$r0,1(0x1)
800006fc:	53ff87ff 	b	-124(0xfffff84) # 80000680 <printf+0x180>
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
80000700:	0280120b 	addi.w	$r11,$r16,4(0x4)
80000704:	28800210 	ld.w	$r16,$r16,0
				if (num < 0) {
80000708:	60028a00 	blt	$r16,$r0,648(0x288) # 80000990 <printf+0x490>
				for (long nn = num; nn /= 10; digits++);
8000070c:	00204e0c 	div.w	$r12,$r16,$r19
80000710:	5c000a60 	bne	$r19,$r0,8(0x8) # 80000718 <printf+0x218>
80000714:	002a0007 	break	0x7
80000718:	02800410 	addi.w	$r16,$r0,1(0x1)
8000071c:	40002180 	beqz	$r12,32(0x20) # 8000073c <printf+0x23c>
80000720:	00150190 	move	$r16,$r12
80000724:	028005ef 	addi.w	$r15,$r15,1(0x1)
80000728:	00204e0c 	div.w	$r12,$r16,$r19
8000072c:	5c000a60 	bne	$r19,$r0,8(0x8) # 80000734 <printf+0x234>
80000730:	002a0007 	break	0x7
80000734:	47ffed9f 	bnez	$r12,-20(0x7fffec) # 80000720 <printf+0x220>
80000738:	001501f0 	move	$r16,$r15
	for (; *s; s++) {
8000073c:	02800652 	addi.w	$r18,$r18,1(0x1)
80000740:	2800024c 	ld.b	$r12,$r18,0
				pos += digits;
80000744:	001041ce 	add.w	$r14,$r14,$r16
				format = 0;
80000748:	0015000f 	move	$r15,$r0
				pos += digits;
8000074c:	00150170 	move	$r16,$r11
	for (; *s; s++) {
80000750:	47fe319f 	bnez	$r12,-464(0x7ffe30) # 80000580 <printf+0x80>
80000754:	53fe5fff 	b	-420(0xffffe5c) # 800005b0 <printf+0xb0>
					pos++;
80000758:	028009ce 	addi.w	$r14,$r14,2(0x2)
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
8000075c:	02801210 	addi.w	$r16,$r16,4(0x4)
					pos++;
80000760:	028021ce 	addi.w	$r14,$r14,8(0x8)
				format = 0;
80000764:	0015000f 	move	$r15,$r0
80000768:	53fea7ff 	b	-348(0xffffea4) # 8000060c <printf+0x10c>
8000076c:	03400000 	andi	$r0,$r0,0x0
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
80000770:	2880022d 	ld.w	$r13,$r17,0
80000774:	02801231 	addi.w	$r17,$r17,4(0x4)
					if (out && pos < n) {
80000778:	6c003190 	bgeu	$r12,$r16,48(0x30) # 800007a8 <printf+0x2a8>
8000077c:	0044f1ba 	srli.w	$r26,$r13,0x1c
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
80000780:	0067834f 	bstrpick.w	$r15,$r26,0x7,0x0
80000784:	02815dfc 	addi.w	$r28,$r15,87(0x57)
80000788:	0012ea9a 	sltu	$r26,$r20,$r26
8000078c:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
80000790:	00005f9c 	ext.w.b	$r28,$r28
80000794:	0013e9ef 	masknez	$r15,$r15,$r26
80000798:	00136b9a 	maskeqz	$r26,$r28,$r26
8000079c:	0010325b 	add.w	$r27,$r18,$r12
800007a0:	001569ef 	or	$r15,$r15,$r26
800007a4:	2900036f 	st.b	$r15,$r27,0
					pos++;
800007a8:	0280058f 	addi.w	$r15,$r12,1(0x1)
					if (out && pos < n) {
800007ac:	6c0031f0 	bgeu	$r15,$r16,48(0x30) # 800007dc <printf+0x2dc>
					int d = (num >> (4*i)) & 0xF;
800007b0:	007be1ba 	bstrpick.w	$r26,$r13,0x1b,0x18
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
800007b4:	00103e5b 	add.w	$r27,$r18,$r15
800007b8:	0067834f 	bstrpick.w	$r15,$r26,0x7,0x0
800007bc:	02815dfc 	addi.w	$r28,$r15,87(0x57)
800007c0:	00126a9a 	slt	$r26,$r20,$r26
800007c4:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
800007c8:	00005f9c 	ext.w.b	$r28,$r28
800007cc:	0013e9ef 	masknez	$r15,$r15,$r26
800007d0:	00136b9a 	maskeqz	$r26,$r28,$r26
800007d4:	001569ef 	or	$r15,$r15,$r26
800007d8:	2900036f 	st.b	$r15,$r27,0
					pos++;
800007dc:	0280098f 	addi.w	$r15,$r12,2(0x2)
					if (out && pos < n) {
800007e0:	6c0031f0 	bgeu	$r15,$r16,48(0x30) # 80000810 <printf+0x310>
					int d = (num >> (4*i)) & 0xF;
800007e4:	0077d1ba 	bstrpick.w	$r26,$r13,0x17,0x14
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
800007e8:	00103e5b 	add.w	$r27,$r18,$r15
800007ec:	0067834f 	bstrpick.w	$r15,$r26,0x7,0x0
800007f0:	02815dfc 	addi.w	$r28,$r15,87(0x57)
800007f4:	00126a9a 	slt	$r26,$r20,$r26
800007f8:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
800007fc:	00005f9c 	ext.w.b	$r28,$r28
80000800:	0013e9ef 	masknez	$r15,$r15,$r26
80000804:	00136b9a 	maskeqz	$r26,$r28,$r26
80000808:	001569ef 	or	$r15,$r15,$r26
8000080c:	2900036f 	st.b	$r15,$r27,0
					pos++;
80000810:	02800d8f 	addi.w	$r15,$r12,3(0x3)
					if (out && pos < n) {
80000814:	6c0031f0 	bgeu	$r15,$r16,48(0x30) # 80000844 <printf+0x344>
					int d = (num >> (4*i)) & 0xF;
80000818:	0073c1ba 	bstrpick.w	$r26,$r13,0x13,0x10
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
8000081c:	00103e5b 	add.w	$r27,$r18,$r15
80000820:	0067834f 	bstrpick.w	$r15,$r26,0x7,0x0
80000824:	02815dfc 	addi.w	$r28,$r15,87(0x57)
80000828:	00126a9a 	slt	$r26,$r20,$r26
8000082c:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
80000830:	00005f9c 	ext.w.b	$r28,$r28
80000834:	0013e9ef 	masknez	$r15,$r15,$r26
80000838:	00136b9a 	maskeqz	$r26,$r28,$r26
8000083c:	001569ef 	or	$r15,$r15,$r26
80000840:	2900036f 	st.b	$r15,$r27,0
					pos++;
80000844:	0280118f 	addi.w	$r15,$r12,4(0x4)
					if (out && pos < n) {
80000848:	6c0031f0 	bgeu	$r15,$r16,48(0x30) # 80000878 <printf+0x378>
					int d = (num >> (4*i)) & 0xF;
8000084c:	006fb1ba 	bstrpick.w	$r26,$r13,0xf,0xc
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
80000850:	00103e5b 	add.w	$r27,$r18,$r15
80000854:	0067834f 	bstrpick.w	$r15,$r26,0x7,0x0
80000858:	02815dfc 	addi.w	$r28,$r15,87(0x57)
8000085c:	00126a9a 	slt	$r26,$r20,$r26
80000860:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
80000864:	00005f9c 	ext.w.b	$r28,$r28
80000868:	0013e9ef 	masknez	$r15,$r15,$r26
8000086c:	00136b9a 	maskeqz	$r26,$r28,$r26
80000870:	001569ef 	or	$r15,$r15,$r26
80000874:	2900036f 	st.b	$r15,$r27,0
					pos++;
80000878:	0280158f 	addi.w	$r15,$r12,5(0x5)
					if (out && pos < n) {
8000087c:	6c0031f0 	bgeu	$r15,$r16,48(0x30) # 800008ac <printf+0x3ac>
					int d = (num >> (4*i)) & 0xF;
80000880:	006ba1ba 	bstrpick.w	$r26,$r13,0xb,0x8
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
80000884:	00103e5b 	add.w	$r27,$r18,$r15
80000888:	0067834f 	bstrpick.w	$r15,$r26,0x7,0x0
8000088c:	02815dfc 	addi.w	$r28,$r15,87(0x57)
80000890:	00126a9a 	slt	$r26,$r20,$r26
80000894:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
80000898:	00005f9c 	ext.w.b	$r28,$r28
8000089c:	0013e9ef 	masknez	$r15,$r15,$r26
800008a0:	00136b9a 	maskeqz	$r26,$r28,$r26
800008a4:	001569ef 	or	$r15,$r15,$r26
800008a8:	2900036f 	st.b	$r15,$r27,0
					pos++;
800008ac:	0280198f 	addi.w	$r15,$r12,6(0x6)
					if (out && pos < n) {
800008b0:	6c0031f0 	bgeu	$r15,$r16,48(0x30) # 800008e0 <printf+0x3e0>
					int d = (num >> (4*i)) & 0xF;
800008b4:	006791ba 	bstrpick.w	$r26,$r13,0x7,0x4
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
800008b8:	00103e5b 	add.w	$r27,$r18,$r15
800008bc:	0067834f 	bstrpick.w	$r15,$r26,0x7,0x0
800008c0:	02815dfc 	addi.w	$r28,$r15,87(0x57)
800008c4:	00126a9a 	slt	$r26,$r20,$r26
800008c8:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
800008cc:	00005f9c 	ext.w.b	$r28,$r28
800008d0:	0013e9ef 	masknez	$r15,$r15,$r26
800008d4:	00136b9a 	maskeqz	$r26,$r28,$r26
800008d8:	001569ef 	or	$r15,$r15,$r26
800008dc:	2900036f 	st.b	$r15,$r27,0
					pos++;
800008e0:	02801d8f 	addi.w	$r15,$r12,7(0x7)
					if (out && pos < n) {
800008e4:	6c0031f0 	bgeu	$r15,$r16,48(0x30) # 80000914 <printf+0x414>
					int d = (num >> (4*i)) & 0xF;
800008e8:	03403dad 	andi	$r13,$r13,0xf
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
800008ec:	00103e5a 	add.w	$r26,$r18,$r15
800008f0:	006781af 	bstrpick.w	$r15,$r13,0x7,0x0
800008f4:	02815dfb 	addi.w	$r27,$r15,87(0x57)
800008f8:	0012368d 	slt	$r13,$r20,$r13
800008fc:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
80000900:	00005f7b 	ext.w.b	$r27,$r27
80000904:	0013b5ef 	masknez	$r15,$r15,$r13
80000908:	0013376d 	maskeqz	$r13,$r27,$r13
8000090c:	001535ed 	or	$r13,$r15,$r13
80000910:	2900034d 	st.b	$r13,$r26,0
					pos++;
80000914:	0280218c 	addi.w	$r12,$r12,8(0x8)
				format = 0;
80000918:	0015000f 	move	$r15,$r0
8000091c:	53fd67ff 	b	-668(0xffffd64) # 80000680 <printf+0x180>
				const char* s2 = va_arg(vl, const char*);
80000920:	2880020c 	ld.w	$r12,$r16,0
80000924:	02801210 	addi.w	$r16,$r16,4(0x4)
				while (*s2) {
80000928:	2800018f 	ld.b	$r15,$r12,0
8000092c:	4001ade0 	beqz	$r15,428(0x1ac) # 80000ad8 <printf+0x5d8>
80000930:	028005ce 	addi.w	$r14,$r14,1(0x1)
80000934:	001131cb 	sub.w	$r11,$r14,$r12
					pos++;
80000938:	00102d8e 	add.w	$r14,$r12,$r11
					s2++;
8000093c:	0280058c 	addi.w	$r12,$r12,1(0x1)
				while (*s2) {
80000940:	2800018f 	ld.b	$r15,$r12,0
80000944:	47fff5ff 	bnez	$r15,-12(0x7ffff4) # 80000938 <printf+0x438>
	for (; *s; s++) {
80000948:	02800652 	addi.w	$r18,$r18,1(0x1)
8000094c:	2800024c 	ld.b	$r12,$r18,0
80000950:	47fc319f 	bnez	$r12,-976(0x7ffc30) # 80000580 <printf+0x80>
80000954:	53fc5fff 	b	-932(0xffffc5c) # 800005b0 <printf+0xb0>
	} else if (out && n) {
80000958:	43fd6e1f 	beqz	$r16,-660(0x7ffd6c) # 800006c4 <printf+0x1c4>
		out[n-1] = 0;
8000095c:	1c00000c 	pcaddu12i	$r12,0
80000960:	029ae18c 	addi.w	$r12,$r12,1720(0x6b8)
80000964:	0010398e 	add.w	$r14,$r12,$r14
80000968:	290001c0 	st.b	$r0,$r14,0
8000096c:	53fd5bff 	b	-680(0xffffd58) # 800006c4 <printf+0x1c4>
				if (out && pos < n) {
80000970:	6c001590 	bgeu	$r12,$r16,20(0x14) # 80000984 <printf+0x484>
					out[pos] = (char)va_arg(vl,int);
80000974:	2880022f 	ld.w	$r15,$r17,0
80000978:	0010324d 	add.w	$r13,$r18,$r12
8000097c:	02801231 	addi.w	$r17,$r17,4(0x4)
80000980:	290001af 	st.b	$r15,$r13,0
				pos++;
80000984:	0280058c 	addi.w	$r12,$r12,1(0x1)
				format = 0;
80000988:	0015000f 	move	$r15,$r0
8000098c:	53fcf7ff 	b	-780(0xffffcf4) # 80000680 <printf+0x180>
					num = -num;
80000990:	00114010 	sub.w	$r16,$r0,$r16
					pos++;
80000994:	028005ce 	addi.w	$r14,$r14,1(0x1)
80000998:	53fd77ff 	b	-652(0xffffd74) # 8000070c <printf+0x20c>
8000099c:	03400000 	andi	$r0,$r0,0x0
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
800009a0:	2880023a 	ld.w	$r26,$r17,0
800009a4:	02801231 	addi.w	$r17,$r17,4(0x4)
				if (num < 0) {
800009a8:	60011b40 	blt	$r26,$r0,280(0x118) # 80000ac0 <printf+0x5c0>
				for (long nn = num; nn /= 10; digits++);
800009ac:	00204f4d 	div.w	$r13,$r26,$r19
800009b0:	5c000a60 	bne	$r19,$r0,8(0x8) # 800009b8 <printf+0x4b8>
800009b4:	002a0007 	break	0x7
800009b8:	44000da0 	bnez	$r13,12(0xc) # 800009c4 <printf+0x4c4>
800009bc:	50012400 	b	292(0x124) # 80000ae0 <printf+0x5e0>
800009c0:	0015036f 	move	$r15,$r27
800009c4:	001501bc 	move	$r28,$r13
800009c8:	028005fb 	addi.w	$r27,$r15,1(0x1)
800009cc:	00204f8d 	div.w	$r13,$r28,$r19
800009d0:	5c000a60 	bne	$r19,$r0,8(0x8) # 800009d8 <printf+0x4d8>
800009d4:	002a0007 	break	0x7
800009d8:	47ffe9bf 	bnez	$r13,-24(0x7fffe8) # 800009c0 <printf+0x4c0>
				for (int i = digits-1; i >= 0; i--) {
800009dc:	001031ed 	add.w	$r13,$r15,$r12
800009e0:	50000800 	b	8(0x8) # 800009e8 <printf+0x4e8>
800009e4:	001501ed 	move	$r13,$r15
						out[pos + i] = '0' + (num % 10);
800009e8:	0010365c 	add.w	$r28,$r18,$r13
					if (out && pos + i < n) {
800009ec:	6c0019b0 	bgeu	$r13,$r16,24(0x18) # 80000a04 <printf+0x504>
						out[pos + i] = '0' + (num % 10);
800009f0:	0020cf4f 	mod.w	$r15,$r26,$r19
800009f4:	5c000a60 	bne	$r19,$r0,8(0x8) # 800009fc <printf+0x4fc>
800009f8:	002a0007 	break	0x7
800009fc:	0280c1ef 	addi.w	$r15,$r15,48(0x30)
80000a00:	2900038f 	st.b	$r15,$r28,0
					num /= 10;
80000a04:	0015035c 	move	$r28,$r26
80000a08:	02bffdaf 	addi.w	$r15,$r13,-1(0xfff)
80000a0c:	00204f9a 	div.w	$r26,$r28,$r19
80000a10:	5c000a60 	bne	$r19,$r0,8(0x8) # 80000a18 <printf+0x518>
80000a14:	002a0007 	break	0x7
				for (int i = digits-1; i >= 0; i--) {
80000a18:	5fffcd8d 	bne	$r12,$r13,-52(0x3ffcc) # 800009e4 <printf+0x4e4>
				pos += digits;
80000a1c:	00106d8c 	add.w	$r12,$r12,$r27
				format = 0;
80000a20:	0015000f 	move	$r15,$r0
80000a24:	53fc5fff 	b	-932(0xffffc5c) # 80000680 <printf+0x180>
					if (out && pos < n) {
80000a28:	6c000d90 	bgeu	$r12,$r16,12(0xc) # 80000a34 <printf+0x534>
						out[pos] = '0';
80000a2c:	0010324d 	add.w	$r13,$r18,$r12
80000a30:	290001a1 	st.b	$r1,$r13,0
					pos++;
80000a34:	0280058d 	addi.w	$r13,$r12,1(0x1)
					if (out && pos < n) {
80000a38:	6c000db0 	bgeu	$r13,$r16,12(0xc) # 80000a44 <printf+0x544>
						out[pos] = 'x';
80000a3c:	0010364d 	add.w	$r13,$r18,$r13
80000a40:	290001b8 	st.b	$r24,$r13,0
					pos++;
80000a44:	2880022d 	ld.w	$r13,$r17,0
80000a48:	0280098c 	addi.w	$r12,$r12,2(0x2)
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
80000a4c:	02801231 	addi.w	$r17,$r17,4(0x4)
80000a50:	53fd2bff 	b	-728(0xffffd28) # 80000778 <printf+0x278>
				const char* s2 = va_arg(vl, const char*);
80000a54:	2880023b 	ld.w	$r27,$r17,0
80000a58:	02801231 	addi.w	$r17,$r17,4(0x4)
				while (*s2) {
80000a5c:	2800036f 	ld.b	$r15,$r27,0
80000a60:	400049e0 	beqz	$r15,72(0x48) # 80000aa8 <printf+0x5a8>
80000a64:	0015018d 	move	$r13,$r12
						out[pos] = *s2;
80000a68:	0010365a 	add.w	$r26,$r18,$r13
					if (out && pos < n) {
80000a6c:	6c0025b0 	bgeu	$r13,$r16,36(0x24) # 80000a90 <printf+0x590>
					pos++;
80000a70:	028005ad 	addi.w	$r13,$r13,1(0x1)
						out[pos] = *s2;
80000a74:	2900034f 	st.b	$r15,$r26,0
				while (*s2) {
80000a78:	001131af 	sub.w	$r15,$r13,$r12
80000a7c:	00103f6f 	add.w	$r15,$r27,$r15
80000a80:	280001ef 	ld.b	$r15,$r15,0
80000a84:	47ffe5ff 	bnez	$r15,-28(0x7fffe4) # 80000a68 <printf+0x568>
					pos++;
80000a88:	001501ac 	move	$r12,$r13
80000a8c:	53fbf7ff 	b	-1036(0xffffbf4) # 80000680 <printf+0x180>
80000a90:	028005ad 	addi.w	$r13,$r13,1(0x1)
				while (*s2) {
80000a94:	001131af 	sub.w	$r15,$r13,$r12
80000a98:	00103f6f 	add.w	$r15,$r27,$r15
80000a9c:	280001ef 	ld.b	$r15,$r15,0
80000aa0:	47ffc9ff 	bnez	$r15,-56(0x7fffc8) # 80000a68 <printf+0x568>
					pos++;
80000aa4:	001501ac 	move	$r12,$r13
				format = 0;
80000aa8:	0015000f 	move	$r15,$r0
80000aac:	53fbd7ff 	b	-1068(0xffffbd4) # 80000680 <printf+0x180>
	size_t pos = 0;
80000ab0:	0015000c 	move	$r12,$r0
	return pos;
80000ab4:	00150017 	move	$r23,$r0
80000ab8:	53fbffff 	b	-1028(0xffffbfc) # 800006b4 <printf+0x1b4>
80000abc:	03400000 	andi	$r0,$r0,0x0
					num = -num;
80000ac0:	0011681a 	sub.w	$r26,$r0,$r26
					if (out && pos < n) {
80000ac4:	6c000d90 	bgeu	$r12,$r16,12(0xc) # 80000ad0 <printf+0x5d0>
						out[pos] = '-';
80000ac8:	0010324d 	add.w	$r13,$r18,$r12
80000acc:	290001b9 	st.b	$r25,$r13,0
					pos++;
80000ad0:	0280058c 	addi.w	$r12,$r12,1(0x1)
80000ad4:	53fedbff 	b	-296(0xffffed8) # 800009ac <printf+0x4ac>
				format = 0;
80000ad8:	0015000f 	move	$r15,$r0
80000adc:	53facbff 	b	-1336(0xffffac8) # 800005a4 <printf+0xa4>
				for (long nn = num; nn /= 10; digits++);
80000ae0:	0015000f 	move	$r15,$r0
80000ae4:	0280041b 	addi.w	$r27,$r0,1(0x1)
80000ae8:	53fef7ff 	b	-268(0xffffef4) # 800009dc <printf+0x4dc>
80000aec:	03400000 	andi	$r0,$r0,0x0

80000af0 <panic>:

void panic(char *s)
{
80000af0:	02bfc063 	addi.w	$r3,$r3,-16(0xff0)
80000af4:	29802077 	st.w	$r23,$r3,8(0x8)
80000af8:	00150097 	move	$r23,$r4
	printf("panic: ");
80000afc:	1c000004 	pcaddu12i	$r4,0
80000b00:	02821084 	addi.w	$r4,$r4,132(0x84)
{
80000b04:	29803061 	st.w	$r1,$r3,12(0xc)
	printf("panic: ");
80000b08:	57f9fbff 	bl	-1544(0xffff9f8) # 80000500 <printf>
	printf(s);
80000b0c:	001502e4 	move	$r4,$r23
80000b10:	57f9f3ff 	bl	-1552(0xffff9f0) # 80000500 <printf>
	printf("\n");
80000b14:	1c000004 	pcaddu12i	$r4,0
80000b18:	0281d084 	addi.w	$r4,$r4,116(0x74)
80000b1c:	57f9e7ff 	bl	-1564(0xffff9e4) # 80000500 <printf>
	while(1){};
80000b20:	50000000 	b	0 # 80000b20 <panic+0x30>
80000b24:	03400000 	andi	$r0,$r0,0x0
80000b28:	03400000 	andi	$r0,$r0,0x0
80000b2c:	03400000 	andi	$r0,$r0,0x0
